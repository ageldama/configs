# vim: set ft=pf
# /usr/local/etc/pf.conf

ext_if="wlan0"
int_if="re0"

ext_if_ip="192.168.0.113"

internal_net="192.168.3.0/24"

## Set and drop these IP ranges on public interface ##
martians = "{
		127.0.0.0/8, 172.16.0.0/12, \
		10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, \
		0.0.0.0/8, 240.0.0.0/4
	    }"

## Set http(80)/https (443) port here ##
	    opened_ports = "{ssh, 8080}"

## enable these services ##
	    #int_tcp_services = "{domain, ntp, smtp, www, https, ftp, ssh, 8080}"
	    #int_udp_services = "{domain, ntp}"

## Skip loop back interface - Skip all PF processing on interface ##
	    set skip on lo


## Sets the interface for which PF should gather statistics such as bytes in/out and packets passed/blocked ##
	    set loginterface $ext_if

# Deal with attacks based on incorrect handling of packet fragments 
	    scrub in all

nat on $ext_if from $internal_net to any -> ($ext_if)

## Set default policy ##
	    block return in log all
	    block out all


# Drop all Non-Routable Addresses 
	    block drop in quick on $ext_if from $martians to any
	    block drop out quick on $ext_if from any to $martians

## Blocking spoofed packets
	    antispoof quick for $ext_if

# Open SSH port which is listening on port 22 from VPN 139.xx.yy.zz Ip only
# I do not allow or accept ssh traffic from ALL for security reasons 
	    #pass in quick on $ext_if inet proto tcp from 139.xxx.yyy.zzz to $ext_if_ip port = ssh flags S/SA keep state label "USER_RULE: Allow SSH from 139.xxx.yyy.zzz"
## Use the following rule to enable ssh for ALL users from any IP address #
#pass in inet proto tcp to $ext_if port ssh

### [ OR ] ###
## pass in inet proto tcp to $ext_if port 22 

# Allow Ping-Pong stuff. Be a good sysadmin 
	    pass inet proto icmp icmp-type echoreq

# All access to our Nginx/Apache/Lighttpd Webserver ports 
	    pass proto tcp from any to $ext_if port $opened_ports

# Allow essential outgoing traffic 
	    pass out quick on $ext_if proto tcp to any #port #$int_tcp_services
	    pass out quick on $ext_if proto udp to any #port #$int_udp_services

# Add custom rules below


pass from $int_if:network to any keep state

#pass in proto tcp to any port $tcp_services keep state
#pass proto udp to any port $udp_services keep state


#	$FreeBSD: releng/12.1/share/examples/pf/pf.conf 293862 2016-01-14 01:32:17Z kevlo $
#	$OpenBSD: pf.conf,v 1.34 2007/02/24 19:30:59 millert Exp $
#
# See pf.conf(5) and /usr/share/examples/pf for syntax and examples.
# Remember to set gateway_enable="YES" and/or ipv6_gateway_enable="YES"
# in /etc/rc.conf if packets are to be forwarded between interfaces.

#ext_if="ext0"
#int_if="int0"

#table <spamd-white> persist

#set skip on lo

#scrub in

#nat-anchor "ftp-proxy/*"
#rdr-anchor "ftp-proxy/*"
#nat on $ext_if inet from !($ext_if) -> ($ext_if:0)
#rdr pass on $int_if proto tcp to port ftp -> 127.0.0.1 port 8021
#no rdr on $ext_if proto tcp from <spamd-white> to any port smtp
#rdr pass on $ext_if proto tcp from any to any port smtp \
#	-> 127.0.0.1 port spamd

#anchor "ftp-proxy/*"
#block in
#pass out

#pass quick on $int_if no state
#antispoof quick for { lo $int_if }

#pass in on $ext_if proto tcp to ($ext_if) port ssh
#pass in log on $ext_if proto tcp to ($ext_if) port smtp
#pass out log on $ext_if proto tcp from ($ext_if) to port smtp
#pass in on $ext_if inet proto icmp from any to ($ext_if) icmp-type { unreach, redir, timex }
