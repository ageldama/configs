" ~/.vimrc
"
"  ageldama@gmail.com : 2006-11-16
"  ageldama@gmail.com : 2017-08-05
"  ageldama@gmail.com : 2018-03-24
"  ageldama@gmail.com : 2018-12-02
"  ageldama@gmail.com : 2021-01-10
"
nnoremap <SPACE> <Nop>
let mapleader=" "

set paste
set nocompatible
syntax on
set nonu
set ruler
set visualbell

set autoindent
set smartindent
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab	" tab대신 스페이스!

set wrap

set textwidth=250

set modeline

set showmode
set showcmd

"
set hls
set incsearch
set ignorecase	" 대소문자무시
set scs	" smart-search

"
set backspace=indent,eol,start

"
set fencs=utf8,euc-kr

"
filetype on
filetype indent on
filetype plugin on


" Clipboard
set clipboard=unnamed



" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500



" https://github.com/VundleVim/Vundle.vim/issues/769#issue-188457119
" START - Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/Vundle.vim/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle.."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  let iCanHazVundle=0
endif
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
if iCanHazVundle == 0
  echo "Installing Bundles, please ignore key map error messages"
  echo ""
  :PluginInstall
endif
" END - Setting up Vundle - the vim plugin bundler

" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle required!
Bundle 'gmarik/vundle'
"
" The bundles you install will be listed here
"
filetype plugin indent on

Bundle 'jlanzarotta/bufexplorer'

Bundle 'scrooloose/nerdtree'
Bundle 'rbgrouleff/bclose.vim'

Bundle 'editorconfig/editorconfig-vim'
Bundle 'liuchengxu/vim-which-key'

Bundle 'easymotion/vim-easymotion'
Bundle 'ntpeters/vim-better-whitespace'

" :ALEInfo?
Bundle 'w0rp/ale'

" #, / and :Occur and :Moccur, <leader>oc and <leader>mo
Bundle 'vim-scripts/occur.vim'

" try :'<,'>:Tab/=<cr>
Bundle 'godlygeek/tabular'

" multiple-cursors:
" start      : <C-n>
" next       : <C-n>
" skip       : <C-x>
" prev       : <C-p>
" select all : <A-n>
Bundle 'terryma/vim-multiple-cursors'

" for GVim
Bundle 'thinca/vim-fontzoom'

" VimGrep
Bundle 'dkprice/vim-easygrep'

"
"Bundle 'vim-airline/vim-airline'
"Bundle 'itchyny/lightline.vim'

" fzf
Bundle 'junegunn/fzf', { 'do': { -> fzf#install() } }
Bundle 'junegunn/fzf.vim'

" ctrlp
Bundle 'kien/ctrlp.vim'

"
Bundle 'morhetz/gruvbox'

" color and font

color gruvbox
set bg=dark

if !has('gui_running')
  set t_Co=256
endif

" lightline
set laststatus=2

if 1
  "set t_Co=256
  "set t_AB=^[[48;5;%dm
  "set t_AF=^[[38;5;%dm
  if has('gui_running')
    set guifont=Noto\ Sans\ Mono\ CJK\ KR\ 10
    color koehler
    set bg=dark
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar
    "
    map <m-o> :Fontzoom!<cr>
    map <m--> <Plug>(fontzoom-smaller)
    map <m-=> <Plug>(fontzoom-larger)
  else
    "color default
    "set bg=dark
  endif
endif

" which-key
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>


" easymotion
nmap g <Plug>(easymotion-s2)
nmap [ <Plug>(easymotion-prev)
nmap ] <Plug>(easymotion-next)

" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)


" ALE
let g:ale_sign_error                 = '>>'
let g:ale_sign_warning               = '--'
"let g:airline#extensions#ale#enabled = 1
let g:ale_completion_enabled         = 0
let g:ale_enabled                    = 1
let g:ale_open_list                  = 0
autocmd BufRead,BufNewFile *.{java} let b:ale_enabled=0


" xclip '\y'
vnoremap <silent><Leader>y :'<,'>w !xclip<CR>

" Close the current buffer
"map <leader>bd :Bclose<cr>:tabclose<cr>gT
" Close all the buffers
"map <leader>ba :bufdo bd<cr>
map <leader>bn :bnext<cr>
map <leader>bp :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tN :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext
map <leader>tp :tabprev<cr>
map <leader>tn :tabnext<cr>

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>





" ripgrep + vimgrep
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --follow



map <leader>ln :lnext<CR>
map <leader>lp :lprev<CR>
map <leader>cn :cnext<CR>
map <leader>cp :cprev<CR>


" fzf
map <leader>zf :Files<CR>
map <leader>zg :GFiles<CR>
map <leader>zG :GFiles?<CR>
map <leader>zb :Buffers<CR>
map <leader>zm :Marks<CR>
map <leader>zr :History<CR>
map <leader>z: :History:<CR>
map <leader>z/ :History/<CR>
map <leader>zk :Maps<CR>
map <leader>z? :Helptags<CR>
map <leader>zt :Filetypes<CR>

" ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'


"
" TODO ? Plugin 'SirVer/ultisnips'
" TODO ? Plugin 'honza/vim-snippets'

"EOF
