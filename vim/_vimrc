" ~/.vimrc
"
"  ageldama@gmail.com : 2006-11-16
"  ageldama@gmail.com : 2017-08-05
"  ageldama@gmail.com : 2018-03-24
"  ageldama@gmail.com : 2018-12-02
"  ageldama@gmail.com : 2021-01-10
"  ageldama@gmail.com : 2021-05-04, suckless.
"  ageldama@gmail.com : 2023-03-06, lighter.
"  ageldama@gmail.com : 2023-07-30, vim-plug.
"

" .. instead of backspace:
"let mapleader=" "
"nnoremap <SPACE> <Nop>


let g:mapleader = "\\"
"let g:mapleader = "\<Space>"
let g:maplocalleader = ','
nnoremap <silent> <leader>      :<c-u>WhichKey '\'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>


set paste
set nocompatible
syntax on
set nu
set ruler
set visualbell

set autoindent
set smartindent
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab	" tab대신 스페이스!

set wrap

"set textwidth=250

set modeline

set showmode
set showcmd

"
set hls
set incsearch
set ignorecase	" 대소문자무시
set scs	" smart-search

"
set backspace=indent,eol,start

"
set fencs=utf8,euc-kr

"
filetype on
filetype indent on
filetype plugin on


" Clipboard
set clipboard=unnamed



" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500



" color and font

"color gruvbox
set bg=light

if !has('gui_running')
  set t_Co=256
endif


set laststatus=2

if 1
  "set t_Co=256
  "set t_AB=^[[48;5;%dm
  "set t_AF=^[[38;5;%dm
  if has('gui_running')
    set guifont=DejaVu\ Sans\ Mono\ 10
    color koehler
    set bg=dark
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar
    "
    map <m-o> :Fontzoom!<cr>
    map <m--> <Plug>(fontzoom-smaller)
    map <m-=> <Plug>(fontzoom-larger)
  else
    "color default
    "set bg=dark
  endif
endif


" Useful mappings for managing tabs
"map <leader>tn :tabnew<cr>
"map <leader>t<C-q> :tabclose<cr>
"map <leader>t[ :tabprev<cr>
"map <leader>t] :tabnext<cr>

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>
map <leader>cD :e %:p:h<cr>:pwd<cr>





" ripgrep + vimgrep
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --follow


" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>


" Source Vim configuration file and install plugins
nnoremap <silent><leader>I :source ~/.vimrc<CR>





let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


"
call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes



Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }


if !empty(glob("~/.use-vim-fzf"))
  "Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf'
endif

Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'

" + _
Plug 'terryma/vim-expand-region'



Plug 'junegunn/vim-peekaboo'


" gs_, gsc etc...
Plug 'arthurxavierx/vim-caser'

" ctrlp
Plug 'kien/ctrlp.vim'

"Plug 'vim-airline/vim-airline'
Plug 'itchyny/lightline.vim'

Plug 'jlanzarotta/bufexplorer'

Plug 'rbgrouleff/bclose.vim'

Plug 'editorconfig/editorconfig-vim'

Plug 'easymotion/vim-easymotion'
Plug 'ntpeters/vim-better-whitespace'

" :ALEInfo?
if !empty(glob("~/.use-vim-ale"))
  Plug 'w0rp/ale'
endif

" #, / and :Occur and :Moccur, <leader>oc and <leader>mo
"Plug 'vim-scripts/occur.vim'

" try :'<,'>:Tab/=<cr>
Plug 'godlygeek/tabular'

" multiple-cursors:
" start      : <C-n>
" next       : <C-n>
" skip       : <C-x>
" prev       : <C-p>
" select all : <A-n>
Plug 'terryma/vim-multiple-cursors'

" for GVim
Plug 'thinca/vim-fontzoom'


Plug 'junegunn/goyo.vim'


Plug 'liuchengxu/vim-which-key'


if !empty(glob("~/.use-vim-go"))
  Plug 'fatih/vim-go'
endif


Plug 'jamessan/vim-gnupg'

"Plug 'axvr/org.vim'

Plug 'mattn/calendar-vim'


" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting




"let g:lightline = { 'colorscheme': 'wombat', }


" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)



" journals, memos, plans
let $diary_dir = "~/P/v3"
map <Leader>op :e $diary_dir/PLAN.org<cr>

map <Leader>`g :Goyo<cr>


let g:calendar_diary_list = [
      \   {'name': 'Diary', 'path': $HOME.'/P/v3/diary', 'ext': '.org'},
      \   {'name': 'Memo', 'path': $HOME.'/P/v3/memo', 'ext': '.org'},
      \ ]

function! GetAbbreviatedMonthName(month_num)
  let l:month_names_short = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  if a:month_num >= 1 && a:month_num <= 12
    return l:month_names_short[a:month_num - 1]
  else
    return "Invalid Month"
  endif
endfunction

function MyCalAction(day,month,year,week,dir)
  " day   : day you actioned
  " month : month you actioned
  " year  : year you actioned
  " week  : day of week (Mo=1 ... Su=7)
  " dir   : direction of calendar
  " echo printf("%s-%s-%s == %s", a:year, a:month, a:day, a:dir)
  let diary_curr = g:calendar_diary_list[g:calendar_diary_list_curr_idx]
  let diary_basedir = diary_curr['path']

  let dt = strptime('%Y/%m/%d', printf('%d/%02d/%02d', a:year, a:month, a:day))
  let filepath = strftime("%Y-%m%b/%Y-%m%b-%d%a", dt)
  let fullpath = diary_basedir . '/' . filepath . '.org'

  echo fullpath
  execute 'close'
  execute 'edit' fullpath

  if !filereadable(fullpath)
    let LINE_date = strftime("#+TITLE: %Y-%m-%d", dt)
    let LINE_tags = '#+TAGS[]:'

    call append(0, [LINE_date, LINE_tags])
  endif
endfunction
let calendar_action = 'MyCalAction'


function InsertDateTime()
  let dt = strftime("[%Y-%m-%d %a %H:%M]")
  call append(line('.'), [dt])
endfunction


" datetime
map <leader>`! :call InsertDateTime()<CR>

" fzf
map <Leader>zz :FZF<cr>
"map <Leader>zh :FZF ~<cr>


" xorg, clipboard
map <C-y> :w !xclip -sel c <CR><CR>


" ctrlp + rg?
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
else
  let g:ctrlp_clear_cache_on_exit = 0
endif


augroup vimrc-auto-mkdir
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  function! s:auto_mkdir(dir, force)
    if !isdirectory(a:dir)
          \   && (a:force
          \       || input("'" . a:dir . "' does not exist. Create? [y/N]") =~? '^y\%[es]$')
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction
augroup END



if !empty(expand(glob("~/.vimrc.local2")))
    source ~/.vimrc.local2
else
  " echo "File does not exists"
endif


"EOF
