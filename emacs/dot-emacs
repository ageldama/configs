(setq inhibit-startup-screen t)

;;; load-path
(setq load-path (cons (expand-file-name "~/.emacs.d/") load-path))


;;; l10n, i18n...
;(set-language-environment 'Korean)
(set-language-environment "UTF-8")
;(setq default-input-method "korean-hangul3")
;(set-input-method "korean-hangul")
;(prefer-coding-system 'utf-8-dos)
;(utf-translate-cjk-load-tables)
;; (global-set-key [?\S- ] 'toggle-input-method)


;;; tabs & indents
(setq tab-width 2
    indentn-tabs-mode nil)

;;; default font
;(set-frame-font "Terminus-16")

;;; global-font-lock-mode
(global-font-lock-mode 1 t)

;;; ding-dang!
(setq visible-bell t)

;;; show column-no on modeline
(column-number-mode t)

;;; time/load
(display-time-mode t)

;;; show matching parent?
(show-paren-mode t)

;;; font-lock always
(global-font-lock-mode t)

;;; visible mark region
(transient-mark-mode t)

;;; interactive-search
(isearch-mode t)

;;; interactive-completion
(icomplete-mode t)

;;; interactive-switch-buffer
(iswitchb-mode t)

;;; ido-mode
(require 'ido)
(ido-mode t)

;;; icicles-mode
;; (add-to-list 'load-path "/home/adaltan/icicles/")
;; (require 'icicles)
;; (icy-mode +1)

;;; no backup files
(setq-default make-backup-files nil)
(setq-default version-control nil) ; backup uses version numbers?

;;; menu-bar -- turn-off when '-nw'
(menu-bar-mode window-system)
(if window-system
  (tool-bar-mode -1)
  (scroll-bar-mode -1))

;;; indents, spaces, tabs...
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

;;; fill
(setq-default fill-column 80)

;;; user?
(setq-default user-full-name "Yun, Jonghyouk")
(setq-default user-mail-address "ageldama@gmail.com")


;;; grep-find, rgrep, find-grep-dired
;(setq find-program "c:/cygwin/bin/find.exe")


;;; color-theme
;(require 'color-theme)
;; (setq color-theme-is-global t)
;(color-theme-word-perfect)


;;; TODO: browse-url

;; cc-mode
(setq c-default-style "java")
(setq c-basic-offset 4)

;;; emacs-lisp-mode
(setq lisp-indent-offset 2)


;;; elpa
(when
  (load
    (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))

;;; paredit.el
(autoload 'paredit-mode "paredit"
    "Minor mode for pseudo-structurally editing Lisp code." t)
(dolist (i '(emacs-lisp-mode-hook 
              lisp-mode-hook 
              lisp-interaction-mode-hook
              scheme-mode-hook
              inferior-scheme-mode-hook
              slime-repl-mode-hook 
              slime-mode-hook))
    (add-hook i (lambda () (paredit-mode +1))))


;;; clojure
(setq slime-net-coding-system 'utf-8-unix)

;;; haskell-mode
(require 'inf-haskell)



;;; jde
;(load-file "~/.emacs.d/my-jde.el")


;;; erc
(require 'erc)
(setq erc-interpret-mirc-color t)
(defun erc-connect-ozinger ()
  (interactive)
  (erc :server "ozinger.ruree.net" :port 6669
    :nick "ageldama"
    :full-name "Yun, Jonghyouk"))


;;; view-mode + bookmark = lee0c ppa-dol
(add-hook 'view-mode-hook
  (function (lambda ()
     (local-set-key "\S-m" 'bookmark-set)
     (local-set-key "\S-s" 'bookmark-save))))






;;; EOF



