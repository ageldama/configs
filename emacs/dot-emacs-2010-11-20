(setq inhibit-startup-screen t)

;;; load-path
(add-to-list 'load-path (expand-file-name "~/.emacs.d/"))

;;; l10n, i18n...
;(set-language-environment 'Korean)
;(set-language-environment "UTF-8")
;(setq default-input-method "korean-hangul3")
;(set-input-method "korean-hangul")
;(prefer-coding-system 'utf-8-unix)
;(utf-translate-cjk-load-tables)
;; (global-set-key [?\S- ] 'toggle-input-method)


;;; tabs & indents
(setq tab-width 2
    indent-tabs-mode nil)

;;; default font
;(set-frame-font "Terminus-16")



;;; global-font-lock-mode
(global-font-lock-mode 1)

;;; ding-dang!
(setq visible-bell t)

;;; show column-no on modeline
(column-number-mode t)

;;; time/load
(display-time-mode -1)

;;; show matching parent?
(show-paren-mode t)

;;; font-lock always
(global-font-lock-mode t)

;;; visible mark region
(transient-mark-mode t)

;;; interactive-search
;(isearch-mode 1)

;;; interactive-completion
(icomplete-mode t)

;;; interactive-switch-buffer
(iswitchb-mode t)

;;; ido-mode
(require 'ido)
(ido-mode t)

;;; no backup files
(setq-default make-backup-files nil)
(setq-default version-control nil) ; backup uses version numbers?

;;; menu-bar -- turn-off when '-nw'
;(unless window-system (menu-bar-mode -1))
;; (if window-system
;;   (progn

(unless window-system
  (menu-bar-mode -1))

;;; indents, spaces, tabs...
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

;;; fill
(setq-default fill-column 80)

;;; user?
(setq-default user-full-name "Jonghyouk Yun")
(setq-default user-mail-address "ageldama@gmail.com")


;;; grep-find, rgrep, find-grep-dired
;(setq find-program "c:/cygwin/bin/find.exe")






;;; TODO: browse-url

;; cc-mode
(setq c-default-style "java")
(setq c-basic-offset 4)

;;; emacs-lisp-mode
(setq lisp-indent-offset 2)

;;; view-mode + bookmark
(defun bookmark-set-and-save-on-this-buffer ()
  (interactive)
  (progn
    (bookmark-set (buffer-name))
    (bookmark-save)))

(add-hook 'view-mode-hook 
  (function (lambda ()
              (local-set-key "\S-l" 'bookmark-bmenu-list)
              (local-set-key "\S-m" 'bookmark-set-and-save-on-this-buffer))))


;;; lusty-explorer
(when (require 'lusty-explorer nil 'noerror)
  ;; overrride the normal file-opening, buffer switching
  (global-set-key (kbd "C-x C-f") 'lusty-file-explorer)
  (global-set-key (kbd "C-x b")   'lusty-buffer-explorer))



;;; slime
;; (setq slime-net-coding-system 'utf-8-unix)
;; (add-to-list 'load-path (expand-file-name "~/lisp/slime-2010-11-05/"))
;; ;(setq slime-backend (expand-file-name "~/lisp/slime-2010-11-05/swank-loader.lisp"))
;; (require 'slime)
;; ;(setq inferior-lisp-program "/home/adaltan/lisp/ccl/lx86cl")
;; ;(setq inferior-lisp-program "/usr/bin/sbcl")
;; ;(setq inferior-lisp-program "/usr/bin/clisp")
;; (setq slime-lisp-implementations
;;   '((:sbcl ("/usr/bin/sbcl"))
;;      (:clisp ("/usr/bin/clisp"))))
;; ;(setq-default inferior-lisp-program "/usr/lib/ecl/ecl-original")
;; (slime-setup '(slime-fancy))
;; (setq slime-header-line-p nil)
;;
(load "~/lisp/my-clojure-env.el")


;;; org-mode
(add-hook 'org-mode-hook
  (lambda () (turn-on-auto-fill)))




;;; EOF
