;;; -*- mode: emacs-lisp; coding: utf-8; -*-
(setq user-full-name    "Jong-Hyouk Yun")
(setq user-mail-address "ageldama@gmail.com")

(setq inhibit-startup-screen t)

;; Don't forget `M-x esup', profile your `.emacs'.
(setq gc-cons-threshold
      (if (< (or (car (memory-info)) 9999999999999999)
             (* 1024 1024 8))
          (* 1024 1024 500) ; 500 MiB
        ;; or, 100 MiB
        (* 1024 1024)))

(defvar *my-gc-timer* nil)

(defun my-gc-start-timer ()
  (interactive)
  (when (null *my-gc-timer*)
    (setq *my-gc-timer*
          (run-with-idle-timer 60 t
                               (lambda ()
                                 (garbage-collect))))))

(defun my-gc-cancel-timer ()
  (interactive)
  (when *my-gc-timer*
    (cancel-timer *my-gc-timer*)
    (setq *my-gc-timer* nil)))

(defun my-gc-toggle-timer ()
  (interactive)
  (if *my-gc-timer*
      (progn (my-gc-cancel-timer)
             (message "GC timer: cancelled"))
    (progn (my-gc-start-timer)
           (message "GC timer: started -- %s" *my-gc-timer*))))

(my-gc-start-timer)


(defun toggle-battery-saving-mode ()
  (interactive)
  (call-interactively #'global-flycheck-mode)
  (call-interactively #'global-git-gutter-mode)
  ;;(global-hl-todo-mode)
  )


;;;
(require 'cl-lib)


(defconst +sys/gui?+
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst +sys/winnt?+
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst +sys/linux?+
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst +sys/bsd?+
  (eq system-type 'berkeley-unix)
  "BSD?")

(defconst +sys/unix-like?+
  (or +sys/linux?+ +sys/bsd?+))

(defconst +sys/mac?+
  (eq system-type 'darwin)
  "Are we running on a Mac system?")



(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-selection-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
;; NOTE: the default is just fine.
;; (when +sys/gui?+
;;   (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))


(setq default-input-method   "korean-hangul") ; 인코딩, 언어환경 설정 이후에 적용해야함.




;; Display column numbers in modeline
(column-number-mode  t)

(global-hl-line-mode -1) ; no thx


(show-paren-mode     t) ; show matching paren
(transient-mark-mode t) ; make transient block visible




;; (setq browse-url-browser-function
;;       'browse-url-firefox)

(global-auto-revert-mode t)


;; cuz annoying
(global-whitespace-mode -1)
(setq-default show-trailing-whitespace nil)


;;
(setq-default indent-tabs-mode nil) ; suppress using TAB chars for indentation.
(setq tab-width nil) ;; ONLY affects to REAL <TAB>-chars to display.
;;(global-set-key "\t" (lambda () (interactive) (insert-char 32 2))) ;; [tab] inserts two spaces
(electric-indent-mode +1)


;;; hippie-expand
(defadvice hippie-expand (around hippie-expand-case-fold)
  "Try to do case-sensitive matching (not effective with all functions)."
  (let ((case-fold-search nil))
    ad-do-it))
(ad-activate 'hippie-expand)



(add-hook 'kill-emacs-query-functions
          (lambda () (y-or-n-p "Bye??? "))
          'append)


;;; no backup files
(setq make-backup-files nil)
(setq version-control   nil)   ; backup uses version numbers?

(if +sys/gui?+
    (progn
      (menu-bar-mode   -1)
      (tool-bar-mode   -1)
      (scroll-bar-mode -1))
  (progn
    (menu-bar-mode   -1)))


(display-time-mode   -1)
(display-battery-mode -1)






(global-set-key (kbd "C-x C-b") #'ibuffer)



;;; package.el
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if nil "http" "https")))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "marmalade" (concat proto "://marmalade-repo.org/packages/")) t)
  (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t)
  ;; (when (< emacs-major-version 24)
  ;;   (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/"))))
  )
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))


(use-package quelpa :ensure t :pin melpa
  :config (setq ;; big startup/init speed boosts:
           quelpa-checkout-melpa-p nil  ; don't use it
           quelpa-update-melpa-p nil    ; and don't even update it
           ))

(use-package f :ensure t)
(use-package s :ensure t)


;;; GUI fonts
;; 한글 예시. Ll1| 0Oo@ [] {} 아침 일찍 구름 낀 백제성을 떠나.
;; NOTE: 화면이 C-p, C-n 등이 느리면 /D2Coding/, 괜찮으면 /Noto Sans Mono CJK/

(defcustom *ageldama/set-font-fixed?* t "...")
(defcustom *ageldama/font-fixed-en* "DejaVu Sans Mono" "eng")
(defcustom *ageldama/font-fixed-ko* "KoPub바탕체" "kor")

(defun my-set-fixed-fonts ()
  (interactive)
  (when *ageldama/set-font-fixed?*
    (let ((en-fn
           *ageldama/font-fixed-en*
           )
          (ko-fn
           *ageldama/font-fixed-ko*
           ))
      ;; default Latin font (e.g. Consolas)
      (set-frame-font en-fn t)
      (set-face-attribute 'default nil :family en-fn)
      ;; default font size (point * 10)
      ;; NOTE depending on the default font,
      ;; if the size is not supported very well, the frame will be clipped
      ;; thus the beginning of the buffer may not be visible correctly.
      (set-face-attribute 'default nil :height 110)
      ;; use specific font for Korean charset.
      ;; if you want to use different font size for specific charset,
      ;; add :size `POINT-SIZE' in the font-spec.
      (set-fontset-font t 'hangul (font-spec :name ko-fn)))))

(defun my-set-variable-fonts ()
  (interactive)
  (set-frame-font "Noto Serif CJK KR" t)
  (set-fontset-font t 'hangul (font-spec :name "Noto Serif CJK KR")))

(defun which-active-modes ()
  "Give a message of which minor modes are enabled in the current buffer."
  (interactive)
  (let ((active-modes))
    (mapc (lambda (mode) (condition-case nil
                             (if (and (symbolp mode) (symbol-value mode))
                                 (add-to-list 'active-modes mode))
                           (error nil) ))
          minor-mode-list)
    (message "Active modes are %s" active-modes)
    active-modes))

(defun my-auto-set-font-fixed-or-variable (&rest arguments)
  (if (memq 'buffer-face-mode (which-active-modes))
      (my-set-variable-fonts)
    (my-set-fixed-fonts)))

(advice-add #'variable-pitch-mode
            :after #'my-auto-set-font-fixed-or-variable)


(when +sys/gui?+
  (cond ((or +sys/unix-like?+ +sys/mac?+)
         (my-set-fixed-fonts))
  	;; Windows
        (+sys/winnt?+
         (set-face-attribute 'default nil :font "Consolas-11"))
        (t :unknown)))



;;; cleaner modeline.
(use-package diminish :ensure t :pin melpa
  :config
  (progn
    (add-hook 'auto-revert-mode-hook
              (lambda () (diminish 'auto-revert-mode)))
    (add-hook 'ivy-mode-hook (lambda ()
                               (diminish 'ivy-mode)))
    (diminish 'hs-minor-mode)
    (diminish 'counsel-mode)
    (diminish 'ivy-mode)
    (diminish 'undo-tree-mode)))

;;; Hydra
(use-package hydra :ensure t :pin melpa)

;;; which-key
(use-package which-key :ensure t
  :diminish which-key-mode
  :config (progn (which-key-mode)
                 (which-key-setup-side-window-bottom)))


;;; vimish-fold
(when t
  (use-package vimish-fold :ensure t :pin melpa
    :after evil
    :config (progn (vimish-fold-global-mode +1)
                   (global-set-key (kbd "C-c @ t") 'vimish-fold-toggle)
                   (global-set-key (kbd "C-c @ f") 'vimish-fold)
                   (global-set-key (kbd "C-c @ d") 'vimish-fold-delete)))

  (use-package evil-vimish-fold
    :ensure t :pin melpa
    :after vimish-fold
    :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))
  )


;;; hs
(load-library "hideshow")

(dolist (i '(c-mode-common-hook emacs-lisp-mode-hook
                                java-mode-hook lisp-mode-hook
                                perl-mode-hook sh-mode-hook
                                python-mode-hook))
  (add-hook i 'hs-minor-mode))

(defhydra hydra-hs ()
  "
Hide^^            ^Show^            ^Toggle^    ^Navigation^
----------------------------------------------------------------
_h_ hide all      _s_ show all      _t_oggle    _n_ext line
_d_ hide block    _a_ show block              _p_revious line
_l_ hide level

_SPC_ cancel
"
  ("s" hs-show-all)
  ("h" hs-hide-all)
  ("a" hs-show-block)
  ("d" hs-hide-block)
  ("t" hs-toggle-hiding)
  ("l" hs-hide-level)
  ("n" forward-line)
  ("p" (forward-line -1))
  ("SPC" nil)
  )


;;; rainbow-delimiters
(use-package rainbow-delimiters  :ensure t :pin melpa
  :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))


(use-package highlight-indent-guides  :ensure t :pin melpa
  :if +sys/gui?+
  :diminish
  ;; :hook ((prog-mode web-mode nxml-mode) . highlight-indent-guides-mode)
  :config
  (setf
   ;; 'character 정말로 주석처리할 때 문자가 포함되어 버려서.
   ;; 'fill 너무 촌스러워 보여서.
   highlight-indent-guides-method 'column
   highlight-indent-guides-responsive 'top
   ;; (highlight-indent-guides-delay 0)
   ;; make it transparent (kinda)
   highlight-indent-guides-auto-odd-face-perc 3
   highlight-indent-guides-auto-even-face-perc 7
   ;;(highlight-indent-guides-auto-character-face-perc 7)
   ))

(use-package highlight-indentation :ensure t :pin melpa)


;;; trees, files, and directories!
(use-package neotree :ensure t :pin melpa)

(when nil
  (use-package treemacs
    :ensure t)

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t))



;; highlight symbol under the point after an idle
(use-package idle-highlight-mode
  :ensure t :pin melpa
  ;; :config (add-hook 'prog-mode-hook
  ;;                   (lambda () (idle-highlight-mode t)))
  )


;;; helpful, discover-my-major
(use-package helpful :pin melpa :ensure t
  :config (progn
            (setq counsel-describe-function-function #'helpful-callable)
            (setq counsel-describe-variable-function #'helpful-variable)
            (global-set-key (kbd "C-h f") #'helpful-callable)
            (global-set-key (kbd "C-h v") #'helpful-variable)
            (global-set-key (kbd "C-h k") #'helpful-key)
            (global-set-key (kbd "C-h C-.") #'helpful-at-point)))



;;; markdown syntax highlighting and exporting
(use-package markdown-mode :ensure t :pin melpa
  :config (setq markdown-command "pandoc"))


;;; inverse of `fill-text'
(use-package unfill :ensure t :pin melpa)


;;; highlights TODO, FIXME, DONT, FAIL, NOTE, TEMP, HACK, etc.
(use-package hl-todo :ensure t :pin melpa
  :config (global-hl-todo-mode +1))



;; lacarte -- better F10 menu-bar.
;; (use-package lacarte :ensure t :pin marmalade
;;   :config (progn
;;    (global-set-key [?\e ?\M-x] 'lacarte-execute-command)
;;    (global-set-key [?\M-`]     'lacarte-execute-menu-command)
;;    (global-set-key [f10]       'lacarte-execute-menu-command)))
(global-set-key (kbd "M-`")       'menu-bar-open)
(global-set-key (kbd "<f10>")       'menu-bar-open)


;;;
(use-package counsel :ensure t :pin melpa
  :diminish
  :config (progn
            (defun swiper-thing-at-point ()
              (interactive)
              (cl-flet ((ivy-with-thing-at-point (cmd)
                                              (let ((ivy-initial-inputs-alist
                                                     (list
                                                      (cons cmd (thing-at-point 'symbol)))))
                                                (funcall cmd))))
                (if current-prefix-arg
                    (ivy-with-thing-at-point 'swiper)
                  (swiper))))

            ;;
            (ivy-mode 1)
            (setq ivy-use-virtual-buffers t)
            (setq enable-recursive-minibuffers t)
            (setq ivy-re-builders-alist
                  '((swiper . ivy--regex-plus)
                    (counsel-M-x . ivy--regex-fuzzy)
                    (t      . ivy--regex-plus)))
            (global-set-key "\C-s" 'swiper-thing-at-point)
            (global-set-key (kbd "C-c C-r") 'ivy-resume)
            (global-set-key (kbd "<f6>") 'ivy-resume)
            (global-set-key (kbd "M-x") 'counsel-M-x)
            (global-set-key (kbd "C-x C-f") 'counsel-find-file)
            (global-set-key (kbd "C-h a") 'counsel-apropos)
            ;; USE `helpful' INSTEAD:
            ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
            ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
            (global-set-key (kbd "<f1> l") 'counsel-find-library)
            (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
            (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
            (global-set-key (kbd "C-c g") 'counsel-git)
            (global-set-key (kbd "C-c j") 'counsel-git-grep)
            (global-set-key (kbd "C-c k") 'counsel-rg)
            ;; (global-set-key (kbd "C-x l") 'counsel-locate)
            ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
            (global-set-key (kbd "M-y") 'counsel-yank-pop)
            (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))

;; `C-o` in Ivy minibuf.
(use-package ivy-hydra :ensure t :pin melpa)

(use-package ivy-rich :ensure t :pin melpa
  :config (ivy-rich-mode +1))

;;; wgrep: writable grep
(use-package wgrep :ensure t :pin melpa)

;;; projectile
(use-package projectile :pin melpa
  :config
  (progn (projectile-global-mode)
         ;;(diminish 'projectile-mode)
         (setq projectile-mode-line-prefix " Prj")
         (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)))

(use-package counsel-projectile :ensure t :pin melpa
  :config
  (setq counsel-projectile-rg-initial-input  '(projectile-symbol-or-selection-at-point)))

(defun counsel-rg-maybe-projectile ()
  (interactive)
  (cl-flet ((counsel-rg-thing-at-point ()
                                    (interactive)
                                    (let  ((tap (thing-at-point 'symbol)))
                                      (if (null tap)
                                          (counsel-rg)
                                        (counsel-rg tap)))))
    (let ((tap (thing-at-point 'symbol)))
      (if (projectile-project-p)
          (counsel-projectile-rg)
        (counsel-rg-thing-at-point)))))


;;; undo-tree
(use-package undo-tree
  :diminish 
  :ensure t
  :init (global-undo-tree-mode))



;;; Git
(use-package magit :ensure t :pin melpa)

;; (use-package with-editor :ensure t :pin melpa
;;   :config
;;   ;;(with-editor-export-git-editor)
;;   (define-key (current-global-map)
;;     [remap async-shell-command] 'with-editor-async-shell-command)
;;   (define-key (current-global-map)
;;     [remap shell-command] 'with-editor-shell-command)
;;   (add-hook 'shell-mode-hook  'with-editor-export-editor)
;;   (add-hook 'term-exec-hook   'with-editor-export-editor)
;;   (add-hook 'eshell-mode-hook 'with-editor-export-editor)
;;   (add-hook 'shell-mode-hook
;;             (apply-partially 'with-editor-export-editor "GIT_EDITOR"))
;;   (add-hook 'shell-mode-hook 'with-editor-export-git-editor))


(use-package git-timemachine    :ensure t :pin  melpa)

(when +sys/gui?+
  (use-package git-gutter-fringe :ensure t :pin melpa
    :diminish git-gutter-mode
    :config (global-git-gutter-mode +1))

  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                        :hint nil)
       ("n" git-gutter:next-hunk "next hunk")
       ("p" git-gutter:previous-hunk "previous hunk")
       ("h" (progn (goto-char (point-min)) (git-gutter:next-hunk 1)) "first hunk")
       ("l" (progn (goto-char (point-min)) (git-gutter:previous-hunk 1)) "last hunk")
       ("<RET>" git-gutter:popup-hunk "popup hunk")
       ("s" git-gutter:stage-hunk "stage hunk")
       ("r" git-gutter:revert-hunk "revert hunk")
       ("?" git-gutter:statistic "stats")
       ("m" magit-status "magit" :exit t)
       ("b" magit-blame "blame" :exit t)
       ("t" git-timemachine "timemachine" :exit t)
       ("d" magit-dispatch "dispatch" :exit t)       
       ("<SPC>" nil "quit")))


;;; flycheck.
(use-package flycheck :ensure t :pin melpa
  :config (global-flycheck-mode +1))


;;; company.
(use-package company :ensure t :pin melpa
  :diminish company-mode
  :config (progn (require 'company)
		 (global-company-mode +1)
                 ;; (global-set-key (kbd "C-TAB") 'company-complete)
		 ;; (global-set-key (kbd "C-c \\") 'company-complete)
                 ;; (global-set-key (kbd "C-c \\") 'counsel-company)
		 (define-key company-active-map (kbd "RET") 'company-complete-selection)
		 (define-key company-active-map (kbd "<prior>") 'company-previous-page)
		 (define-key company-active-map (kbd "<next>") 'company-next-page)
		 (setq company-tooltip-align-annotations t)
		 (add-hook 'after-init-hook 'global-company-mode)))

(defmacro bind-company-local-key (hook key)
  `(add-hook ,hook
             (lambda () (local-set-key ,key
                                       'company-capf))))

(bind-company-local-key 'prog-mode-hook (kbd "C-c \\"))
(bind-company-local-key 'text-mode-hook (kbd "C-c \\"))


;;; eldoc
(use-package eldoc :ensure t :pin melpa :diminish eldoc-mode)

;;; Org
(add-hook 'org-mode-hook
          (lambda () (progn
                       (local-set-key (kbd "C-c l") 'org-store-link)
                       (turn-on-auto-fill))))

(setq org-log-done 'time)
(setq org-startup-with-inline-images t)

(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)


;; https://emacs.stackexchange.com/a/45623/20004
(require 'org-attach)
(setq org-link-abbrev-alist '(("org-attach" . org-attach-expand-link)))


;;; toc-org -- https://github.com/snosov1/toc-org
(use-package toc-org :ensure t :pin melpa
  :config
    (add-hook 'org-mode-hook 'toc-org-mode)
    (add-hook 'markdown-mode-hook 'toc-org-mode)
    ;(define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point)
    )

;;; org-capture
(setq org-default-notes-file "~/Vault2/c.org")

(defun org-capture-open ()
  (interactive)
  (find-file org-default-notes-file))

;;; org-tree-slide
(use-package org-tree-slide :ensure t :pin melpa)

;;; PlantUML
(use-package plantuml-mode :ensure t :pin melpa
  :config
  (setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  (setq org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")

  (org-babel-do-load-languages
   'org-babel-load-languages
   (append org-babel-load-languages '((plantuml . t))))

  (setq org-confirm-babel-evaluate nil)

  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
                (org-redisplay-inline-images))))

  ;; TODO C-c C-,
  ;; <u"<TAB>"
  ;; (add-to-list 'org-structure-template-alist
  ;;              '("u" "#+BEGIN_SRC plantuml :file ?.png
  ;;                   \nskinparam monochrome true
  ;;                   \n#+END_SRC"))
  )


;;; writeroom?
(use-package writeroom-mode :ensure t :pin melpa)




;;; Window move.
(use-package ace-window :ensure t :pin melpa
  :config (global-set-key (kbd "C-x o") 'ace-window))

;;; buf-move-*
(use-package buffer-move :ensure t :pin melpa)

;;;
(defun window-toggle-split-direction ()
  "Switch window split from horizontally to vertically, or vice versa.
i.e. change right window to bottom, or change bottom window to right."
  (interactive)
  (require 'windmove)
  (let ((done))
    (dolist (dirs '((right . down) (down . right)))
      (unless done
        (let* ((win (selected-window))
               (nextdir (car dirs))
               (neighbour-dir (cdr dirs))
               (next-win (windmove-find-other-window nextdir win))
               (neighbour1 (windmove-find-other-window neighbour-dir win))
               (neighbour2 (if next-win (with-selected-window next-win
                                          (windmove-find-other-window neighbour-dir next-win)))))
          ;;(message "win: %s\nnext-win: %s\nneighbour1: %s\nneighbour2:%s" win next-win neighbour1 neighbour2)
          (setq done (and (eq neighbour1 neighbour2)
                          (not (eq (minibuffer-window) next-win))))
          (if done
              (let* ((other-buf (window-buffer next-win)))
                (delete-window next-win)
                (if (eq nextdir 'right)
                    (split-window-vertically)
                  (split-window-horizontally))
                (set-window-buffer (windmove-find-other-window neighbour-dir) other-buf))))))))

(global-set-key (kbd "C-x |") 'window-toggle-split-direction)


;;; Yasnippet
(use-package yasnippet :ensure t :pin melpa
  :diminish yas-minor-mode
  :config ;;(yas-global-mode +1)
  (progn
    (add-hook 'prog-mode-hook #'yas-minor-mode)
    (add-hook 'text-mode-hook #'yas-minor-mode)))

(use-package yasnippet-snippets :ensure t :pin melpa
  :after yasnippet
  :config (yas-reload-all))

;;; avy
(use-package avy :ensure t :pin melpa
  :custom
  (avy-timeout-seconds 0.3)
  (avy-style 'pre)
  ;; :custom-face
  ;; (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold))))
  )

;;; multiple-cursors
(use-package multiple-cursors :ensure t :pin melpa
  :config (progn (global-set-key (kbd "C-c m c") 'mc/edit-lines)
                 (global-set-key (kbd "C->") 'mc/mark-next-like-this)
                 (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
                 (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)))


(defhydra hydra-multiple-cursors (:hint nil)
  "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
 [Click] Cursor at point       [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("C-n" next-line)
  ("C-p" previous-line)
  ("C-f" forward-char)
  ("C-b" backward-char)    
  ("s" mc/mark-all-in-region-regexp :exit t)
  ("0" mc/insert-numbers :exit t)
  ("A" mc/insert-letters :exit t)
  ("<mouse-1>" mc/add-cursor-on-click)
  ;; Help with click recognition in this hydra
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("q" nil))




;;; iedit -- use `C-;'
(use-package iedit :ensure t :pin melpa :diminish iedit)

;;; expand-region
(use-package expand-region :ensure t :pin melpa
  :config (global-set-key (kbd "C-=") 'er/expand-region))


;;; Evil, my last resort. (sometimes)
(setq evil-want-keybinding nil)

(unless (fboundp 'evil-mode)
  (use-package evil :ensure t :pin melpa
    :init (setq evil-want-integration t)))

(evil-mode +1)

(setq evil-default-state 'normal) ;;emacs)

(defun toggle-evil-mode ()
  (interactive)
  (evil-mode (if (null evil-state) 1 -1)))


(use-package evil-collection
  :after evil
  :ensure t :pin melpa
  :config
  (evil-collection-init))


;;; evil-surround
(use-package evil-surround
  :ensure t :pin melpa
  :config
  (global-evil-surround-mode 1))
"
    'Hello world!'

        --> cs'<q> :

    <q>Hello world!</q>



    ysiw] (iw is a text object):

        [Hello] world!



    wrap the entire line in parentheses with yssb or yss):

        ({ Hello } world!)



    Revert to the original text: ds{ds)

        Hello world!

"


;;; eshell is my fren
(defun eshell-here ()
  (interactive)
  (let ((eshell-buf (get-buffer "*eshell*")))
    (if (null eshell-buf)
        ;; just start new eshell
        (eshell)
      ;; else:
      (with-current-buffer eshell-buf
        (eshell/pushd (eshell/pwd))
        (cd (pwd))
        (eshell-emit-prompt)))))

;;; or, ansi-term is.
(defun ansi-term-here ()
  (interactive)
  (let* ((sh-bin (getenv "SHELL")))
    (ansi-term sh-bin)))


;;; python-mode + projectile
(defun python-cd-proj-root ()
  (interactive)
  (when (fboundp 'projectile-project-root)
    (if-let (root (projectile-project-root))
        (cd root))))


;;(add-hook 'python-mode-hook #'python-cd-proj-root)



;;; stardict, sdcv
(use-package sdcv :ensure t :pin melpa)



;;; elfeed
(use-package elfeed :ensure t :pin melpa)


;;; realgud
(use-package realgud :ensure t :pin melpa)


;;; direnv
(use-package direnv :ensure t :pin melpa
 :config
 (direnv-mode)
 :custom
 (direnv-always-show-summary t)
 (direnv-show-paths-in-summary t)
 (direnv-use-faces-in-summary t))


(use-package editorconfig
  :ensure t :pin melpa
  :diminish
  :config
  (editorconfig-mode 1))


;;; moonshot
;;(quelpa '(moonshot :repo "ageldama/moonshot" :fetcher github))
(use-package moonshot :ensure t :pin melpa)
(require 'moonshot)

(defhydra hydra-moonshot ()
  "
Moonshot^^
---------------------------------
_x_ run-exe 
_d_ debug 
_c_ run-cmd

_SPC_ cancel
"
  ("x" moonshot-run-executable :exit t)
  ("d" moonshot-run-debugger :exit t)
  ("c" moonshot-run-runner :exit t)
  ("SPC" nil)
  )



;;; Misc toggles
(defhydra hydra-misc-toggles ()
  "
Toggles:^^
--------------------------
_l_ : display-line-numbers-mode
_s_ : whitespace-mode
_i_ : highlight-indentation-mode
_I_ : indent-guides-mode
_h_ : idle-highlight-mode
_z_ : ZONE
_G_ : my-gc-toggle-timer
_b_ : toggle-battery-saving-mode

_SPC_ : cancel
"
 ("l" display-line-numbers-mode)
 ("s" global-whitespace-mode)
 ("i" highlight-indentation-mode)
 ("I" highlight-indent-guides-mode)
 ("h" idle-highlight-mode)
 ("z" zone)
 ("G" my-gc-toggle-timer)
 ("b" toggle-battery-saving-mode)

 ("SPC" nil))


;;; Flycheck + Hydra

(defhydra hydra-flycheck
    (:pre (flycheck-list-errors)
     :post (quit-windows-on "*Flycheck errors*")
     )
  "Errors"
  ("f" flycheck-error-list-set-filter "Filter")
  ("j" flycheck-next-error "Next")
  ("k" flycheck-previous-error "Previous")
  ("gg" flycheck-first-error "First")
  ("G" (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
  ("?" flycheck-describe-checker "Desc")
  ("c" flycheck-buffer "Buf")
  ("C" flycheck-compile "Compile")  
  ("s" flycheck-select-checker "Select")
  ("v" flycheck-verify-setup "Verify")
  ("x" flycheck-disable-checker "Disable")
  ("C-w" flycheck-copy-errors-as-kill "Copy")  
  ("SPC" nil))

;;; Windows/Buffers + Hydraw
(defhydra hydra-windbuf (:hint nil)
  "
^Split^           ^Focus^             ^Buf^                  ^Size^
^^^^^^^^-----------------------------------------------------------------
___: split(v)     _o_: other-win.     _S-<left>_: bmv-l      _=_: balance
_|_: split(h)     _<left>_: wmv-l     _S-<right>_: bmv-r     _+_: enlarge(v)
_%_: toggle-dir.  _<right>_: wmv-r    _S-<up>_: bmv-u        _-_: shrink(v)
_q_: delete-win.  _<up>_: wmv-u       _S-<down>_: bmv-d      _<_: shrink(h)
_SPC_: EXIT       _<down>_: wmv-d     _*_: swap              _>_: enlarge(h)
^ ^               ^ ^                 _C-<left>_: prev-buf
^ ^               ^ ^                 _C-<right>_: next-buf
^ ^               ^ ^                 _TAB_: ivy-buf
"
  ("_" split-window-below)
  ("|" split-window-right)
  ("%" window-toggle-split-direction)  
  ("q" delete-window)

  ("o" ace-window)    
  ("<left>" windmove-left)
  ("<right>" windmove-right)
  ("<up>" windmove-up)
  ("<down>" windmove-down)

  ("S-<left>" buf-move-up)
  ("S-<right>" buf-move-right)
  ("S-<up>" buf-move-up)
  ("S-<down>" buf-move-down)
  ("C-<left>" previous-buffer)
  ("C-<right>" next-buffer)
  ("TAB" ivy-switch-buffer)
  ("*" ace-swap-window)

  ("=" balance-windows)
  ("+" enlarge-window)
  ("-" shrink-window)
  ("<" shrink-window-horizontally)
  (">" enlarge-window-horizontally)
  ("SPC" nil))

;;; zoom-mode
;;(use-package zoom :ensure t :pin melpa
;;  :config (zoom-mode +1))

;;; string-inflect
(use-package string-inflection  :ensure t :pin melpa)

(defhydra hydra-string-inflection ()
  "
string-inflection:^^
----------------------------------------------------------
_c_: 'fooBar' lower-camelcase
_C_: 'FooBar' capital-camelcase
_p_: 'Foo_Bar' capital-underscore
_k_: 'foo-bar' kebab
_u_: 'foo_bar' underscore
_U_: 'FOO_BAR' upcase
"
  ("c" string-inflection-lower-camelcase :exit t)
  ("C" string-inflection-camelcase :exit t)
  ("p" string-inflection-capital-underscore :exit t)
  ("k" string-inflection-kebab-case :exit t)
  ("u" string-inflection-underscore :exit t)
  ("U" string-inflection-upcase :exit t)
  ("SPC" nil))

;;; General -- Leading Keybinder
(use-package general :ensure t :pin melpa)

(general-create-definer my-global-leader-def
  :states '(normal visual insert emacs)
  :prefix "SPC"
  :non-normal-prefix "M-SPC")

(general-create-definer my-local-leader-def
  :states '(normal visual insert emacs)
  :prefix "M-RET"
  :non-normal-prefix "M-RET")

(my-global-leader-def
  "/" 'swiper-thing-at-point

  "SPC" 'counsel-M-x
  "C-SPC" 'eval-expression

  "<backtab>" 'ibuffer
  "TAB" 'ivy-switch-buffer

  "?" 'counsel-descbinds

  "$ e" 'eshell-here
  "$ a" 'ansi-term-here
  "." 'neotree

  "r" 'counsel-recentf

  "g" 'magit-status
  "M-g" 'hydra-git-gutter/body

  "o" 'counsel-rg-maybe-projectile
  "p" 'counsel-projectile-find-file-dwim
  "P" 'projectile-commander

  ;;"P" (general-simulate-key "C-c p" :name projectile)
  
  ;;"e" (general-simulate-key "C-c !" :name flycheck)

  "k" 'counsel-yank-pop
  "C-S-k" 'kill-current-buffer

  "m" 'counsel-mark-ring
  "i" 'counsel-imenu

  ":" 'toggle-evil-mode

  "w" 'writeroom-mode

  "h" 'hydra-hs/body
  ;; "f" '(general-simulate-key "C-c @" :name vimish-fold)
  ;'(:ignore t :which-key "fold"); "f t" 'vimish-fold-toggle
  ;; "f f" 'vimish-fold
  ;; "f d" 'vimish-fold-delete

  ;; "y" - yasnippet
  "y" '(:ignore t :which-key "yasnippet")
  "y i" 'yas-insert-snippet
  "y e" 'yas-visit-snippet-file
  "y n" 'yas-new-snippet

  "`" '(:ignore t :which-key "misc")
  "` p" 'counsel-list-processes
  "` b" 'counsel-bookmark
  "` D" 'sdcv-search-pointer
  "` s" 'delete-trailing-whitespace
  "` f" 'elfeed
  "` G" 'garbage-collect

  "!" 'hydra-flycheck/body

  "C-q" 'hydra-misc-toggles/body

  "C-c" '(:ignore t :which-key "capture")
  "C-c RET" 'org-capture
  "C-c l" 'org-capture-open

  "=" 'er/expand-region

  ;; registers
  ;;"r" (general-simulate-key "C-x r" :name regs)

  ;; windows
  "C-w" 'hydra-windbuf/body
  "C-z" 'other-window
  "_" 'split-window-below
  "|" 'split-window-right
  "q" 'delete-window

  "<left>" 'windmove-left
  "<right>" 'windmove-right
  "<up>" 'windmove-up
  "<down>" 'windmove-down

  "S-<left>" 'buf-move-up
  "S-<right>" 'buf-move-right
  "S-<up>" 'buf-move-up
  "S-<down>" 'buf-move-down
  "*" 'ace-swap-window
  "%" 'window-toggle-split-direction

  "0" 'balance-windows
  "+" 'enlarge-window
  "-" 'shrink-window
  ">" 'enlarge-window-horizontally
  "<" 'shrink-window-horizontally

  ;; jump / registers
  "j" 'counsel-register
  "J" 'point-to-register
  
  ;; avy
  ;;"c"  'avy-goto-char-timer
  "l" 'avy-goto-line
  "L" 'avy-goto-char-2

  ;; moonshot
  "x" 'hydra-moonshot/body
  ;; "x x" 'moonshot-run-executable
  ;; "x d" 'moonshot-run-debugger
  ;; "x c" 'moonshot-run-runner

  ;; undo-tree
  "u" 'undo-tree-visualize

  ;; multiple-cursors
  "M-m" 'hydra-multiple-cursors/body

  ;; string-inflection
  "M-i" ''hydra-string-inflection/body

  ;;"'" '(general-simulate-key "C-'" :name mm)
  )


(defun my-C-z ()
  (interactive)
  (setq unread-command-events (listify-key-sequence "\C-z")))

;;(global-set-key (kbd "<f9>") 'my-C-z)
(global-set-key (kbd "<f7>") 'toggle-evil-mode)

;; save -> load : use C-M-m to preview jump in `counsel-register'
(global-set-key (kbd "C-x r j") 'counsel-register)
;;;(global-set-key (kbd "S-<f7>") 'point-to-register)

;; ;;; marks
;; (defun push-local-mark-ring ()
;;   (interactive)
;;   (set-mark-command nil)
;;   (keyboard-quit))
;;
;; (defun xah-pop-local-mark-ring ()
;;   "Move cursor to last mark position of current buffer.
;; Call this repeatedly will cycle all positions in `mark-ring'.
;; URL `http://ergoemacs.org/emacs/emacs_jump_to_previous_position.html'
;; Version 2016-04-04"
;;   (interactive)
;;   (set-mark-command t))
;;
;; ;;(global-set-key (kbd "<f7>") 'pop-global-mark)
;; (global-set-key (kbd "<f8>") 'xah-pop-local-mark-ring)
;; (global-set-key (kbd "S-<f8>") 'push-local-mark-ring)



;;; Lang-support.
(defvar langsup-loadp-path (expand-file-name "~/.emacs.d/load-p/"))
(defvar langsup-base-path (expand-file-name "~/P/configs/emacs/"))

(defun load-langsup (langsup-name)
  "Specify LANGSUP-NAME as elisp filename to load."
  (interactive "fFile to load:")
  (let ((fn (if (file-exists-p langsup-name)
		langsup-name
	      (format "%s/%s" langsup-base-path langsup-name))))
    (load-file fn)))

(defun load-langsup-or-not (loadp-name langsup-name)
  (let ((loadp-fn (format "%s/%s" langsup-loadp-path loadp-name)))
    (when (f-exists? loadp-fn)
      (load-langsup langsup-name))))


(dolist (i '(
             ;;(org-roam . "org-roam.el")
             (clojure . "clojure.el")
             (org-more . "org-more.el")
             (protobuf . "proto+grpc.el")
             (groovy . "groovy/groovy.el")
             (js2 . "javascript/js2.el")
             (jsx . "javascript/jsx.el")             
             (web . "web.el")
             (tide . "javascript/tide.el")
             (js+light . "javascript/js+light.el")
             (pug . "javascript/pug.el")
             (vue . "javascript/vue.el")
             (sly . "sly.el")
             (slime . "slime.el")
             (perl5 . "perl5.el")
             (golang . "golang.el")
             (java-lsp . "lsp.el")
             (golang-lsp . "golang-lsp.el")
             (rust . "rust.el")
             (rust+racer . "rust+racer.el")
             (c++ . "c++.el")
             (geiser . "geiser.el")
             (auctex . "auctex.el")
             (tcl . "tcl.el")
             (elpy . "python/elpy.el")
             (ruby . "ruby.el")
             ))
  (load-langsup-or-not (symbol-name (car i)) (cdr i)))


;;; Uptime, Startup Time
(message "Startup time: %s" (emacs-uptime))


;;; pacman: protobuf
(let ((path  "/usr/share/emacs/site-lisp/protobuf-mode.el"))
  (when (f-exists? path)
    (load-file path)
    (add-to-list 'auto-mode-alist '("\\.proto$" . protobuf-mode))))



;;; EOF.
