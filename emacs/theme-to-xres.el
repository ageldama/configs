;; https://gitlab.com/protesilaos/dotfiles/-/issues/31
;; am using urxvt and a snippet based on https://github.com/larkery/emacs/blob/master/site-lisp/theme-to-xresources.el to generate the theme.

 
 

(defun theme-to-xresources ()
  (interactive)
  (require 'term)
  (with-temp-buffer
    (insert "! Generated by theme-to-xresources\n")
    (dolist (spec
             '(("emacs.background" default :background)
               ("emacs.foreground" default :foreground)
               ("URxvt.background" default :background)
               ("URxvt.borderColor" default :background)
               ("URxvt.foreground" default :foreground)
               ("URxvt.cursorColor" cursor :background)
               ("URxvt.color0" term-color-black :background)
               ("URxvt.color1" term-color-red :background)
               ("URxvt.color2" term-color-green :background)
               ("URxvt.color3" term-color-yellow :background)
               ("URxvt.color4" term-color-blue :background)
               ("URxvt.color5" term-color-magenta :background)
               ("URxvt.color6" term-color-cyan :background)
               ("URxvt.color7" term-color-white :background)
               ("URxvt.color8" term-color-black :background t)
               ("URxvt.color9" term-color-red :background t)
               ("URxvt.color10" term-color-green :background t)
               ("URxvt.color11" term-color-yellow :background t)
               ("URxvt.color12" term-color-blue :background t)
               ("URxvt.color13" term-color-magenta :background t)
               ("URxvt.color14" term-color-cyan :background t)
               ("URxvt.color15" term-color-white :background t)))
      (let ((color (face-attribute (cadr spec) (caddr spec))))
        (unless (eq color 'unspecified)
          (let* ((rgb (color-name-to-rgb color))
                 (hsl (apply #'color-rgb-to-hsl rgb))
                 (hsl-shifted (list (+ 0.05 (nth 0 hsl)) (min 1.0 (+ 0.05 (nth 1 hsl))) (min 1.0 (+ 0 (nth 2 hsl)))))
                 (rgb-shifted (apply #'color-hsl-to-rgb hsl-shifted)))
            (insert (format "%s: %s\n" (car spec)
                            (apply #'color-rgb-to-hex (if (cadddr spec) rgb-shifted rgb))))))))
    (write-region (point-min) (point-max) "~/.Xresources.colors"))
  (call-process "xrdb" nil nil nil "-merge" (expand-file-name "~/.Xresources")))

