

* DONE (make-frame-command)
  CLOSED: [2021-06-02 Wed 16:19]



* DONE sudo edit
  CLOSED: [2021-06-02 Wed 16:41]
    ("E" spacemacs/sudo-edit "Open using sudo...")

    
* DONE add dir/file-variable
  CLOSED: [2021-06-02 Wed 16:47]
  SPC f v d 	add a directory variable
  SPC f v f 	add a local variable to the current file
  SPC f v p 	add a local variable to the first line of the current file


  
* DONE open cur file-or-dir with extl-app
  CLOSED: [2021-06-02 Wed 16:59]
     == xdg-open.
     

* DONE google-search?
  CLOSED: [2021-06-02 Wed 16:59]


* DONE show+copy curr filename/ext/path/linenr/colnr.
  CLOSED: [2021-06-02 Wed 17:08]
    SPC f y c 	show and copy current file absolute path with line and column number in the minibuffer
    SPC f y d 	show and copy current directory absolute path in the minibuffer
    SPC f y l 	show and copy current file absolute path with line number in the minibuffer
    SPC f y n 	show and copy current file name with extension in the minibuffer
    SPC f y N 	show and copy current file name without extension in the minibuffer
    SPC f y y 	show and copy current file absolute path in the minibuffer
    
   ("y" "Yank/Copy"
    ("c" spacemacs/copy-file-path-with-line-column "File path with line and column")
    ("d" spacemacs/copy-directory-path "Directory path")
    ("l" spacemacs/copy-file-path-with-line "File path with line number")
    ("n" spacemacs/copy-file-name "File name")
    ("N" spacemacs/copy-file-name-base "File name without extension")
    ("y" spacemacs/copy-file-path "File path")
    ("b" spacemacs/copy-buffer-name "Buffer name")))))







* TODO Selectrum, Embark, and Consult [/]
  - [ ] embark-export
  - [ ] consult-bookmark
  - [ ] consult-buffer
  - [ ] consult-yank


  #+begin_src emacs-lisp


;;; Selectrum, Consult
;; https://sachachua.com/dotemacs/#orgd0ff05f
(use-package selectrum :ensure t :pin melpa :init (selectrum-mode +1)) 

(use-package prescient :ensure t :pin melpa :config (prescient-persist-mode +1))

(use-package selectrum-prescient
    :ensure t :pin melpa
    :init (selectrum-prescient-mode +1) :after selectrum)

(use-package company-prescient
    :ensure t :pin melpa
    :init (company-prescient-mode +1))

(use-package consult    :ensure t :pin melpa
  :after projectile
  :bind (("C-x r x" . consult-register)
         ("C-x r b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complet-command
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)
         ("M-#" . consult-register)
         ;;("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ("M-g o" . consult-outline) 
         ("M-g h" . consult-org-heading)
         ("M-g a" . consult-org-agenda)
         ("M-g m" . consult-mark)
         ("C-x b" . consult-buffer)
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ("M-g e" . consult-error)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         ("M-g l" . consult-line)    
         ("M-s m" . consult-multi-occur)
         ("C-x c o" . consult-multi-occur)
         ("C-x c SPC" . consult-mark)
         :map isearch-mode-map
         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ("M-s l" . consult-line))
  :init
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)
  :config
  (setq consult-project-root-function #'projectile-project-root)
  (setq consult-narrow-key "<"))

(use-package marginalia     :ensure t :pin melpa
  :init
  (marginalia-mode)
  :config
  (setq marginalia-annotators 
        '(marginalia-annotators-heavy marginalia-annotators-light)
        ;;'(marginalia-annotators-light)
    )
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))
  :bind (:map minibuffer-local-completion-map
              ("M-A" . marginalia-cycle)
              ("C-i" . marginalia-cycle-annotators)))

(use-package embark
    :ensure t :pin melpa
  :after selectrum 
  :config
  (setq embark-prompter 'embark-keymap-prompter) 
  (add-to-list 'embark-target-finders 'my/embark-org-element) 
  (add-to-list 'embark-allow-edit-commands #'my/stream-message)
  (add-to-list 'embark-allow-edit-commands #'my/journal-post)
  (embark-define-keymap embark-sketch-actions
    "Org Mode sketch-related actions"
    ("o" my/sketch-insert-file-as-link)
    ("v" my/geeqie-view))
  (embark-define-keymap embark-journal-actions
    "Journal"
    ("e" my/journal-edit))
  (add-to-list 'embark-keymap-alist '(sketch . embark-sketch-actions))
  (add-to-list 'embark-keymap-alist '(journal . embark-journal-actions))
  :bind
  (:map minibuffer-local-map
        (("C-c e" . embark-act)
         ("C-;" . embark-act))
        :map embark-collect-mode-map
        (("C-c e" . embark-act)
         ("C-;" . embark-act))
        :map embark-general-map
        (("j" . my/journal-post)
         ("m" . my/stream-message))
        :map embark-variable-map
        ("l" . edit-list)))

(use-package embark-consult
    :ensure t :pin melpa
  :after (embark consult) 
  :demand t                ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook (embark-collect-mode . embark-consult-preview-minor-mode))


;; TODO consult-buffer
;; TODO consult-recent-file

;; TODO consult -- ignore-case

;; TODO consult-yank-from-kill-ring
;; TODO consult-yank-pop


;; TODO consult-register
;; TODO consult-register-store


;; TODO consult-goto-line
;; TODO   consult-imenu
;; TODO consult-project-imenu

;; TODO consult-multi-occur

;; TODO consult-compile-error

;; TODO consult-flycheck


;; TODO consult-complex-command -- M-:
;; TODO consult-apropos
;; TODO consult-man
;; TODO consult-file-externally

(use-package consult-flycheck :ensure t :pin melpa)



  #+end_src
