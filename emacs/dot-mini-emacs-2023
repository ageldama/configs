;;; -*- mode: emacs-lisp; coding: utf-8; -*-

(setq inhibit-startup-screen t)
(setq default-input-method   "korean-hangul")
(prefer-coding-system 'utf-8-unix)

(setq user-full-name    "Jong-Hyouk Yun")
(setq user-mail-address "ageldama@gmail.com")

(column-number-mode  t)
(display-time-mode   -1)
(show-paren-mode     t)
(transient-mark-mode t)

(global-auto-revert-mode t)
;;(global-whitespace-mode +1)
;; (setq-default show-trailing-whitespace t)



;;; hippie-expand
(defadvice hippie-expand (around hippie-expand-case-fold)
  "Try to do case-sensitive matching (not effective with all functions)."
  (let ((case-fold-search nil))
    ad-do-it))

(ad-activate 'hippie-expand)

(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill
        try-complete-file-name-partially try-complete-file-name
        try-expand-all-abbrevs try-expand-list try-expand-line
        try-complete-lisp-symbol-partially try-complete-lisp-symbol))

(global-set-key "\M-/" 'hippie-expand)



;;; no backup files
(setq make-backup-files nil)
(setq version-control   nil)   ; backup uses version numbers?

(if window-system
    (progn
      (menu-bar-mode   -1)
      (tool-bar-mode   -1)
      (scroll-bar-mode -1))
  (progn
    (menu-bar-mode   -1)))

;;; +1 -> show it, no need horiz-scrolling:
(global-visual-line-mode +1)


;;; 내장 eldoc
(global-eldoc-mode -1)


;;; GUI fonts
;; 한글 예시. Ll1| 0Oo@ [] {} 아침 일찍 구름 낀 백제성을 떠나.
;; NOTE: 화면이 C-p, C-n 등이 느리면 /D2Coding/, 괜찮으면 /Noto Sans Mono CJK/

(defun my-set-fixed-fonts ()
  (interactive)
  (let ((en-fn
         ;; "Noto Sans Mono CJK KR"
         "DejaVu Sans Mono"
	 )
        (ko-fn
         ;; "Noto Sans Mono CJK KR"
         "NanumGothicCoding"
         ))
    ;; default Latin font (e.g. Consolas)
    ;; but I use Monaco
    (set-frame-font en-fn t)
    (set-face-attribute 'default nil :family en-fn)
    ;; default font size (point * 10)
    ;; WARNING!  Depending on the default font,
    ;; if the size is not supported very well, the frame will be clipped
    ;; so that the beginning of the buffer may not be visible correctly.
    (set-face-attribute 'default nil :height 130)
    ;; use specific font for Korean charset.
    ;; if you want to use different font size for specific charset,
    ;; add :size POINT-SIZE in the font-spec.
    (set-fontset-font t 'hangul (font-spec :name ko-fn))))

(when (and t window-system)
  (cond
   ;;
   ((member system-type 
            '(berkeley-unix gnu/linux darwin))
    (my-set-fixed-fonts))
   ;; Windows
   ((string-equal system-type "windows-nt")
    (set-face-attribute 'default nil :font "Consolas-11"))
   (t :unknown)))

;;;
(global-linum-mode   -1)
(global-hl-line-mode -1)


(global-set-key (kbd "M-`")       'menu-bar-open)
(global-set-key (kbd "<f10>")       'menu-bar-open)


;;;
(setq-default indent-tabs-mode nil)
(setq tab-width nil)
;;; ONLY affects to REAL <TAB>-chars to display.
;;; (global-set-key "\t" (lambda () (interactive) (insert-char 32 2))) ; [tab] inserts two spaces
(electric-indent-mode +1)
(setq c-basic-offset 2)





;;; packages
(require 'package)

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if nil "http" "https")))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t)
  (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))
  )

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))



(use-package f :ensure t :pin melpa)

(use-package s :ensure t :pin melpa)

(use-package org :ensure t :pin org)


(use-package modus-themes :ensure t :pin melpa)

;; (when (display-graphic-p)
;;   (load-theme 'modus-vivendi-tinted t ))



(use-package hydra :ensure t :pin melpa)



(use-package which-key :ensure t
  :diminish which-key-mode
  :config (progn (which-key-mode)
                 (which-key-setup-side-window-bottom)
                 (setq which-key-max-description-length 200)))



(use-package writeroom-mode :ensure t :pin melpa)





;;;
(use-package avy :ensure t :pin melpa
  :custom
  (avy-timeout-seconds 0.3)
  (avy-style 'pre)
  :config
  (progn
    (global-set-key (kbd "C-'") 'avy-goto-char-timer)
    (global-set-key (kbd "C-:") 'avy-goto-line)
    (global-set-key (kbd "C-c C-j") 'avy-resume)
    (global-set-key (kbd "M-g l") 'avy-goto-line)
    (global-set-key (kbd "M-g f") 'avy-goto-char)
    (global-set-key (kbd "M-g w") 'avy-goto-word-1)
    (global-set-key (kbd "M-g W") 'avy-goto-word-0)
    ;; (global-set-key (kbd "M-g j") 'hydra-avy-goto/body)
    (global-set-key (kbd "M-g ,") 'avy-pop-mark)))



;;; Dired
(setq dired-dwim-target t
      wdired-confirm-overwrite t
      wdired-use-interactive-rename t
      )


;;; Org
(add-hook 'org-mode-hook
          (lambda ()
            (when (fboundp 'flycheck-mode)
              (flycheck-mode -1))
            ;;
            (setq truncate-lines nil)
            (auto-fill-mode +1)
            ))


(add-hook 'fundamental-mode-hook
          (lambda ()
            (auto-fill-mode +1)))



(setq org-log-done 'time)
(setq org-startup-with-inline-images t)


;;;
;; (setq org-todo-keywords
;;       '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))




(use-package ace-window :ensure t :pin melpa
  :config (global-set-key (kbd "C-x o") 'ace-window))



;;; diary, memo
(require 'f)  ;; elpa-f
(require 's)  ;; elpa-s
(require 'org)  ;; elpa-org
(require 'cl)

(load-file (s-concat minimi-config-path "/cal-dt.el"))

;; (diary/new-or-open-memo)
;; (diary/new-or-open-org-file)


(defun open-v3-plan ()
  (interactive)
  (find-file "~/P/v3/PLAN.org"))



;;; Don't forget `M-x esup', profile your `.emacs'.
;; (setq gc-cons-threshold
;;       (if (< (or (car (memory-info)) 9999999999999999)
;;              (* 1024 1024 8))
;;           (* 1024 1024 500) ; 500 MiB
;;         ;; or, 100 MiB
;;         (* 1024 1024)))

(defvar *my-gc-timer* nil)

(defun my-gc-start-timer ()
  (interactive)
  (when (null *my-gc-timer*)
    (setq *my-gc-timer*
          (run-with-idle-timer 60 t
                               (lambda ()
                                 (garbage-collect))))))

(defun my-gc-cancel-timer ()
  (interactive)
  (when *my-gc-timer*
    (cancel-timer *my-gc-timer*)
    (setq *my-gc-timer* nil)))

(defun my-gc-toggle-timer ()
  (interactive)
  (if *my-gc-timer*
      (progn (my-gc-cancel-timer)
             (message "GC timer: cancelled"))
    (progn (my-gc-start-timer)
           (message "GC timer: started -- %s" *my-gc-timer*))))

;;(my-gc-start-timer)


;;; battery

(defun toggle-battery-saving-mode ()
  (interactive)
  (when (fboundp #'global-flycheck-mode)
    (call-interactively #'global-flycheck-mode -1))
  (when (fboundp #'global-eldoc-mode)
    (call-interactively #'global-eldoc-mode    -1))
  (when (fboundp #'global-company-mode)
    (call-interactively #'global-company-mode  -1))
  ;;(global-hl-todo-mode)
  )


(defun buffer-path-and-line-col ()
  (interactive)
  (let ((pos (format "%s\t%s\t%s" (or (buffer-file-name) default-directory)
                     (line-number-at-pos) (current-column))))
    (kill-new pos)
    (message "Path (Yanked): %s" pos)))


;;;
;; (use-package browse-kill-ring :ensure t)


;;;

(defun def-hydras ()

  (defhydra hydra-files (:exit t)
    ("n" find-name-dired "dired-by-name")

    ("M-s f" (lambda () (interactive)
               (find-file (s-concat "/sudo:root@localhost:" (buffer-file-name))))
     "sudo:file")

    ("M-s d" (lambda () (interactive)
               (find-file (s-concat "/sudo:root@localhost:"
                                    (file-name-directory (buffer-file-name)))))
     "sudo:dired")

    ("M-l f" find-file-literally "file-lit")
    ("M-l c" (lambda () (interactive)
               (find-file-literally (buffer-file-name)))
     "cur-lit")

    ("M-w" buffer-path-and-line-col "copy-path-linum"))


  (defhydra hydra-local-vars (:exit t)
    ("d"  add-dir-local-variable  "dir-local")
    ("f"  add-file-local-variable "file-local")
    ("p"  add-file-local-variable-prop-line "prop-line"))


  (eval
   `(defhydra hydra-misc-toggles (:exit t)
      "toggles"
      ("l" display-line-numbers-mode "linum")
      ("s" global-whitespace-mode "whitespaces")
      ("z" zone "zone")
      ("G" my-gc-toggle-timer "gc-timer")
      ("b" toggle-battery-saving-mode "batter-saving")
      ,@(when (fboundp 'writeroom-mode)
          '(("w" writeroom-mode "writeroom")))
      (":" toggle-evil-mode "evil")))


  (defhydra hydra-org (:exit t)
    ("d" diary/new-or-open-org-file "diary" )
    ("m" diary/new-or-open-memo "memo" )
    ("p" open-v3-plan "plan" ))


  (defhydra hydra-git (:exit t)
    ("w" mini-git/gwip "gwip" )
    ("a" mini-git/add "add" )
    ("s" mini-git/status "status" )
    ("p" mini-git/push "push" )
    ("F" mini-git/pull "pull" )
    )
  

  (eval
   `(defhydra hydra-mini (global-map "<f12>" :exit t)
      "minimi"

      ("`" menu-bar-open "menu-bar" )

      ("b" ibuffer "buf" )

      ("o" hydra-org/body "org")

      ("M-f" hydra-files/body "files" )

      ("u" undo-tree-visualize "undo-tree" )
      
      ,@(when (fboundp 'magit-status)
          '(("g" magit-status "magit" )))

      ("G" hydra-git/body "git")

      ,@(when (fboundp 'browse-kill-ring)
          '(("M-k" browse-kill-ring "kill-ring" )))
      
      ("C-k" kill-current-buffer "kill-cur-buf" )

      ;; ("M--" hydra-misc-fns/body "misc-fns" )

      ("M-q" hydra-misc-toggles/body "toggles" )

      ,@(when (fboundp 'hydra-moonshot/body)
          '(("x" hydra-moonshot/body "moonshot" )))

      ,@(when (fboundp 'hydra-string-inflection/body)
          '(("M-i" hydra-string-inflection/body/body
             "infl.")))

      ,@(when (fboundp 'hydra-multiple-cursors/body)
          '(("M-c" hydra-multiple-cursors/body "mcurs" )))

      ,@(when (fboundp 'hydra-yas/body)
          '(("M-s" hydra-yas/body "yas" )))

      ,@(when (fboundp 'hydra-flycheck/body)
          '(("M-c" hydra-flycheck/body "flychk" )))

      ("M-v" hydra-local-vars/body "local-vars" )))

  ) ;; def-hydras

(def-hydras)

(global-set-key (kbd "C-x x") 'hydra-mini/body)

;;(global-set-key (kbd "C-`") 'hydra-mini/body)






(defhydra hydra/tab (:exit t)
  "tabs"
  ("<left>"   #'tab-previous
   "prev" )
  ("<right>"  #'tab-next
   "next" )
  ("<tab>"    #'tab-recent
   "recent" )
  ("<down>"   #'tab-new
   "new" )
  ("<up>"     #'tab-list
   "list" )
  ("X"        #'tab-close
   "close" )
  ("SPC" nil))



;;; wgrep: writable grep
(use-package wgrep :ensure t :pin melpa)




;;; ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)




;;; expand-region
(use-package expand-region :ensure t :pin melpa
  :config 
  (global-set-key (kbd "C-=") 'er/expand-region))



;;; https://cute-jumper.github.io/emacs/2016/02/22/my-simple-setup-to-avoid-rsi-in-emacs

(defhydra hydra-expand-region
  (:body-pre (call-interactively 'set-mark-command)
             :exit t)
  "hydra for mark commands"
  ("=" er/expand-region "expand")
  ("P" er/mark-inside-pairs "in-pair")
  ("Q" er/mark-inside-quotes "in-quote")
  ("p" er/mark-outside-pairs "out-pair")
  ("q" er/mark-outside-quotes "out-quote")
  ("d" er/mark-defun "defun")
  ("c" er/mark-comment "comment")
  ("." er/mark-text-sentence "sentence")
  ("h" er/mark-text-paragraph "paragraph")
  ("w" er/mark-word "word")
  ("u" er/mark-url "url")
  ("m" er/mark-email "email")
  ("s" er/mark-symbol "symbol")
  ("j" (funcall 'set-mark-command t) :exit nil)
  ("SPC" nil))


(global-set-key (kbd "C-+") 'hydra-expand-region/body)


;;;
(defmacro def-compile-no-arg-cmd (name &rest body)
  (let ((cmd (gensym "cmd-")))
    `(defun ,name ()
       (interactive)
       (let ((,cmd ,@body))
         (compile ,cmd)))))




;;; git / wip
(require 'subr-x)

(defun git/find-nearest-repo ()
  (interactive)
  (let ((cur-dir default-directory)
        (result nil)
        (keep-looping t))
    ;;
    (while (and keep-looping
                (not (equal "../" cur-dir))
                (not (null cur-dir)))
      ;;
      (setq cur-dir
            (string-remove-suffix "/" cur-dir))
      ;;
      (let ((git-repo (format "%s/.git" cur-dir)))
        (message "dir: %s" git-repo)
        (if (and (f-exists? git-repo) (f-directory? git-repo))
            ;; then:
            (progn
              (message "found: %s" cur-dir)
              (setq result cur-dir keep-looping nil))
          ;; else:
          (progn ;; move to parent
            (setq cur-dir (f-parent cur-dir))))
        ))
    
    ;; return
    result))




(def-compile-no-arg-cmd mini-git/gwip
  (let ((commit-msg "--wip-- [skip ci]")
        (git-root (git/find-nearest-repo)))
    (if (null git-root)
        (error "Not a/in git-repos? [%s]"
               default-directory)
        ;; else: found `.git/`:
      (format "cd '%s' && git commit -am '%s'"
                       git-root commit-msg))))
  

(def-compile-no-arg-cmd mini-git/add 
  (format "cd '%s' && git add '%s'"
          default-directory (buffer-file-name)))


(def-compile-no-arg-cmd mini-git/status 
  (format "cd '%s' && git status" default-directory))


(def-compile-no-arg-cmd mini-git/push
  (format "cd '%s' && git push" default-directory))


(def-compile-no-arg-cmd mini-git/pull
  (format "cd '%s' && git pull" default-directory))





;;; recompile

(defun recompile-showing-compilation-window ()
  (interactive)
  (let* ((frm+wnd-lst
          (apply #'append
                 (mapcar (lambda (frm)
                           (with-selected-frame frm
                             (mapcar (lambda (wnd) (cons frm wnd))
                                     (window-list))))
                         (visible-frame-list))))
         (comp-frm-wnd (seq-find #'(lambda (frm-wnd)
                                     (with-selected-frame (car frm-wnd)
                                       (with-current-buffer (window-buffer (cdr frm-wnd))
                                         (or (member major-mode '(compilation-mode grep-mode))
                                             )
                                         )))
                                 frm+wnd-lst)))
    (if comp-frm-wnd
        (progn (with-selected-frame (car comp-frm-wnd)
                 (with-current-buffer (window-buffer (cdr comp-frm-wnd)) (recompile))))
      ;; else
      (message "no comile-buffer found"))))


(global-set-key (kbd "<f5>")
                #'recompile-showing-compilation-window)





;;; god-mode
(when nil
  (use-package god-mode :ensure t :pin melpa
    :config
    (progn
      ;; (define-key god-local-mode-map (kbd "z") #'hydra-mini/body)
      (define-key god-local-mode-map (kbd ".") #'repeat)

      (global-set-key (kbd "<escape>") #'god-local-mode)
      (define-key god-local-mode-map (kbd "i") #'god-local-mode)

      (global-set-key (kbd "C-x C-1") #'delete-other-windows)
      (global-set-key (kbd "C-x C-2") #'split-window-below)
      (global-set-key (kbd "C-x C-3") #'split-window-right)
      (global-set-key (kbd "C-x C-0") #'delete-window)

      (define-key god-local-mode-map (kbd "<f5>")
        #'recompile-showing-compilation-window)

      (define-key god-local-mode-map (kbd "[") #'backward-paragraph)
      (define-key god-local-mode-map (kbd "]") #'forward-paragraph)

      ;; Big capitals:
      (define-key god-local-mode-map (kbd "W") #'ace-window)
      (define-key god-local-mode-map (kbd "B") #'ibuffer)
      (define-key god-local-mode-map (kbd "T") #'hydra/tab/body)

      ;; TODO HINT : C-, C-w, use the comma-key!

      ;; isearch
      (require 'god-mode-isearch)
      (define-key isearch-mode-map (kbd "<escape>") #'god-mode-isearch-activate)
      (define-key god-mode-isearch-map (kbd "<escape>") #'god-mode-isearch-disable)

      ;;
      (god-mode-all 1)
      )))


;;; undo-tree
(use-package undo-tree
  :diminish 
  :ensure t
  :init (global-undo-tree-mode)
  :config (setq undo-tree-auto-save-history nil))



;;; Evil:

(let ((evil-want-keybinding nil))
  (use-package evil :ensure t :pin melpa))

(setq evil-want-integration t
      evil-want-keybinding t)
(evil-set-undo-system 'undo-tree)

(evil-mode +1)

(setq evil-default-state 'normal) ;;emacs)



(defun toggle-evil-mode ()
  (interactive)
  (evil-mode (if (null evil-state) 1 -1)))



(global-set-key (kbd "<f7>") 'toggle-evil-mode)



(defun my-evil-jump-other-win ()
  (interactive)
  (split-window)
  (evil-jump-to-tag))

(evil-global-set-key 'normal (kbd "g D") 'my-evil-jump-other-win)





;;;

(defvar-local lang-mode-hydra nil)


(defmacro lang-mode-hydra-set (mode-hook hydra-body)
  `(add-hook ,mode-hook
             (lambda () (setq-local lang-mode-hydra
                                    (symbol-function ,hydra-body)))))



(defun do-lang-mode-hydra ()
  (interactive)
  (if lang-mode-hydra
      (call-interactively lang-mode-hydra)
    ;; else
    (message "Null lang-mode-hydra local-var")))


(evil-global-set-key 'normal (kbd "SPC") 'hydra-mini/body)

(evil-global-set-key 'normal (kbd "M-RET") 'do-lang-mode-hydra)

(global-set-key (kbd "C-x x") 'hydra-mini/body)

(global-set-key (kbd "C-x c") 'do-lang-mode-hydra)

(global-set-key (kbd "<f8>") 'hydra-mini/body)

(global-set-key (kbd "<f9>") 'do-lang-mode-hydra)






;;; evil-collection : final retouches
;;;
;; Warning (evil-collection): Make sure to set `evil-want-keybinding' to nil before loading evil or evil-collection.
;; See https://github.com/emacs-evil/evil-collection/issues/60 for more details.
(let ((evil-want-keybinding nil))
  (use-package evil-collection
    :after evil
    :ensure t :pin melpa
    :config
    (progn (evil-collection-init)
           (diminish 'evil-collection-unimpaired-mode ""))
    ))



;;;
(use-package diminish :ensure t :pin melpa
  :config
  (progn
    (diminish 'visual-line-mode)
    (diminish 'which-key-mode)
    ))



;;; EOF.
