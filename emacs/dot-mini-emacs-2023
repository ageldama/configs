;;; -*- mode: emacs-lisp; coding: utf-8; -*-

(setq inhibit-startup-screen t)
(setq default-input-method   "korean-hangul")
(prefer-coding-system 'utf-8-unix)

(setq user-full-name    "Jong-Hyouk Yun")
(setq user-mail-address "ageldama@gmail.com")

(column-number-mode  t)
(display-time-mode   -1)
(show-paren-mode     t)
(transient-mark-mode t)

(global-auto-revert-mode t)
;;(global-whitespace-mode +1)
;; (setq-default show-trailing-whitespace t)


;;; no backup files
(setq make-backup-files nil)
(setq version-control   nil)   ; backup uses version numbers?

(if window-system
    (progn
      (menu-bar-mode   -1)
      (tool-bar-mode   -1)
      (scroll-bar-mode -1))
  (progn
    (menu-bar-mode   -1)))

(global-visual-line-mode +1)

(global-eldoc-mode -1)

;;; GUI fonts
;; 한글 예시. Ll1| 0Oo@ [] {} 아침 일찍 구름 낀 백제성을 떠나.
;; NOTE: 화면이 C-p, C-n 등이 느리면 /D2Coding/, 괜찮으면 /Noto Sans Mono CJK/

(defun my-set-fixed-fonts ()
  (interactive)
  (let ((en-fn
         ;; "Noto Sans Mono CJK KR"
         "D2Coding"
	 )
        (ko-fn
         ;; "Noto Sans Mono CJK KR"
         "D2Coding"
         ))
    ;; default Latin font (e.g. Consolas)
    ;; but I use Monaco
    (set-frame-font en-fn t)
    (set-face-attribute 'default nil :family en-fn)
    ;; default font size (point * 10)
    ;; WARNING!  Depending on the default font,
    ;; if the size is not supported very well, the frame will be clipped
    ;; so that the beginning of the buffer may not be visible correctly.
    (set-face-attribute 'default nil :height 130)
    ;; use specific font for Korean charset.
    ;; if you want to use different font size for specific charset,
    ;; add :size POINT-SIZE in the font-spec.
    (set-fontset-font t 'hangul (font-spec :name ko-fn))))

(when (and t window-system)
  (cond ((or (string-equal system-type "berkeley-unix")
             (string-equal system-type "gnu/linux")
             (string-equal system-type "darwin"))
         (my-set-fixed-fonts))
  	;; Windows
        ((string-equal system-type "windows-nt")
         (set-face-attribute 'default nil :font "Consolas-11"))
        (t :unknown)))

;;;
(global-linum-mode   -1)
(global-hl-line-mode -1)


(global-set-key (kbd "M-`")       'menu-bar-open)
(global-set-key (kbd "<f10>")       'menu-bar-open)


;;;
(setq-default indent-tabs-mode nil)
(setq tab-width nil) ;; ONLY affects to REAL <TAB>-chars to display.
;; (global-set-key "\t" (lambda () (interactive) (insert-char 32 2))) ;; [tab] inserts two spaces
(electric-indent-mode +1)
(setq c-basic-offset 2)





;;; packages
(require 'package)

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if nil "http" "https")))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t)
  (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))
  )

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))



(use-package f :ensure t :pin melpa)

(use-package s :ensure t :pin melpa)

(use-package org :ensure t :pin org)


(use-package modus-themes :ensure t :pin melpa)

;; (when (display-graphic-p)
;;   (load-theme 'modus-vivendi-tinted t ))



(use-package hydra :ensure t :pin melpa)



;; (use-package which-key :ensure t
;;   :diminish which-key-mode
;;   :config (progn (which-key-mode)
;;                  (which-key-setup-side-window-bottom)
;;                  (setq which-key-max-description-length 200)))



(use-package writeroom-mode :ensure t :pin melpa)





;;;
(use-package avy :ensure t :pin melpa
  :custom
  (avy-timeout-seconds 0.3)
  (avy-style 'pre)
  :config
  (progn
    (global-set-key (kbd "C-'") 'avy-goto-char-timer)
    (global-set-key (kbd "C-:") 'avy-goto-char-2)
    (global-set-key (kbd "C-c C-j") 'avy-resume)
    (global-set-key (kbd "M-g l") 'avy-goto-line)
    (global-set-key (kbd "M-g f") 'avy-goto-char)
    (global-set-key (kbd "M-g w") 'avy-goto-word-1)
    (global-set-key (kbd "M-g M-j") 'hydra-avy-goto/body)
    (global-set-key (kbd "M-g C-t") 'avy-pop-mark)))


;;; Dired
(setq dired-dwim-target t
      wdired-confirm-overwrite t
      wdired-use-interactive-rename t
      )


;;; Org
(add-hook 'org-mode-hook
          (lambda ()
            ;;(flycheck-mode -1)
            (setq truncate-lines nil)
            (auto-fill-mode +1)
            ))


(add-hook 'fundamental-mode-hook
          (lambda ()
            (auto-fill-mode +1)))



(setq org-log-done 'time)
(setq org-startup-with-inline-images t)


;;;
;; (setq org-todo-keywords
;;       '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))




(use-package ace-window :ensure t :pin melpa
  :config (global-set-key (kbd "C-x o") 'ace-window))



;;; diary, memo
(require 'f)  ;; elpa-f
(require 's)  ;; elpa-s
(require 'org)  ;; elpa-org
(require 'cl)

(load-file "~/P/configs/emacs/cal-dt.el")

;; (diary/new-or-open-memo)
;; (diary/new-or-open-org-file)


(defun open-v3-plan ()
  (interactive)
  (find-file "~/P/v3/PLAN.org"))



;;; 

(defhydra hydra-mini (global-map "<f12>")
  "minime"
  ("`" menu-bar-open "menu-bar" :exit t)
  ("o d" diary/new-or-open-org-file "diary" :exit t)
  ("o m" diary/new-or-open-memo "memo" :exit t)
  ("o p" open-v3-plan "plan" :exit t)
  ("w" writeroom-mode "writeroom" :exit t)
  ("G w" omz-ish/gwip "gwip" :exit t)
  ("G a" git/add-this "git/add" :exit t)
  ("SPC" nil)
  )

(global-set-key (kbd "C-x x") 'hydra-mini/body)
(global-set-key (kbd "C-`") 'hydra-mini/body)


;;; TODO magit
;;; TODO moonshot
;;; TODO string-inflection
;;; TODO undo-tree


(defhydra hydra/tab ()
  "tabs"
  ("<left>"   #'tab-previous
   "prev" :exit t)
  ("<right>"  #'tab-next
   "next" :exit t)
  ("<tab>"    #'tab-recent
   "recent" :exit t)
  ("<down>"   #'tab-new
   "new" :exit t)
  ("<up>"     #'tab-list
   "list" :exit t)
  ("X"        #'tab-close
   "close" :exit t))


;;; wgrep: writable grep
(use-package wgrep :ensure t :pin melpa)




;;; ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)




;;; expand-region
(use-package expand-region :ensure t :pin melpa
  :config (global-set-key (kbd "C-=") 'er/expand-region))





;;; git / wip
(require 'subr-x)

(defun git/find-nearest-repo ()
  (interactive)
  (let ((cur-dir default-directory)
        (result nil)
        (keep-looping t))
    ;;
    (while (and keep-looping
                (not (equal "../" cur-dir))
                (not (null cur-dir)))
      ;;
      (setq cur-dir
            (string-remove-suffix "/" cur-dir))
      ;;
      (let ((git-repo (format "%s/.git" cur-dir)))
        (message "dir: %s" git-repo)
        (if (and (f-exists? git-repo) (f-directory? git-repo))
            ;; then:
            (progn
              (message "found: %s" cur-dir)
              (setq result cur-dir keep-looping nil))
          ;; else:
          (progn ;; move to parent
            (setq cur-dir (f-parent cur-dir))))
        ))
    
    ;; return
    result))


(defun omz-ish/gwip ()
  (interactive)
  (let ((commit-msg "--wip-- [skip ci]")
        (git-root (git/find-nearest-repo)))
    (when (not (null git-root))
      (message "git-wip-commit: %s"
               (shell-command-to-string
                (format "cd '%s' && git commit -am '%s'"
                        git-root commit-msg))))))


(defun git/add-this ()
  (interactive)
  (message "git-add: %s"
           (shell-command-to-string
            (format "cd '%s' && git add '%s'"
                    default-directory
                    (buffer-file-name)))))



;;; recompile

(defun recompile-showing-compilation-window ()
  (interactive)
  (let* ((frm+wnd-lst
          (apply #'append
                 (mapcar (lambda (frm)
                           (with-selected-frame frm
                             (mapcar (lambda (wnd) (cons frm wnd))
                                     (window-list))))
                         (visible-frame-list))))
         (comp-frm-wnd (seq-find #'(lambda (frm-wnd)
                                     (with-selected-frame (car frm-wnd)
                                       (with-current-buffer (window-buffer (cdr frm-wnd))
                                         (or (member major-mode '(compilation-mode grep-mode))
                                             )
                                         )))
                                 frm+wnd-lst)))
    (if comp-frm-wnd
        (progn (with-selected-frame (car comp-frm-wnd)
                 (with-current-buffer (window-buffer (cdr comp-frm-wnd)) (recompile))))
      ;; else
      (message "no comile-buffer found"))))







;;; god-mode
(use-package god-mode :ensure t :pin melpa
  :config
  (progn
    ;; (define-key god-local-mode-map (kbd "z") #'hydra-mini/body)
    (define-key god-local-mode-map (kbd ".") #'repeat)

    (global-set-key (kbd "<escape>") #'god-local-mode)
    (define-key god-local-mode-map (kbd "i") #'god-local-mode)

    (global-set-key (kbd "C-x C-1") #'delete-other-windows)
    (global-set-key (kbd "C-x C-2") #'split-window-below)
    (global-set-key (kbd "C-x C-3") #'split-window-right)
    (global-set-key (kbd "C-x C-0") #'delete-window)

    (global-set-key (kbd "<f5>")
                    #'recompile-showing-compilation-window)
    (define-key god-local-mode-map (kbd "<f5>")
      #'recompile-showing-compilation-window)

    (define-key god-local-mode-map (kbd "[") #'backward-paragraph)
    (define-key god-local-mode-map (kbd "]") #'forward-paragraph)

    (define-key god-local-mode-map (kbd "W") #'ace-window)
    (define-key god-local-mode-map (kbd "B") #'ibuffer)
    (define-key god-local-mode-map (kbd "T") #'hydra/tab/body)

    ;;; isearch
    (require 'god-mode-isearch)
    (define-key isearch-mode-map (kbd "<escape>") #'god-mode-isearch-activate)
    (define-key god-mode-isearch-map (kbd "<escape>") #'god-mode-isearch-disable)

    ;;;
    (god-mode-all 1)
    ))



;;;
(use-package diminish :ensure t :pin melpa
  :config
  (progn
    (diminish 'visual-line-mode)
    (diminish 'which-key-mode)
    ))

;; use cperl-mode instead of perl-mode
(setq auto-mode-alist (rassq-delete-all 'perl-mode auto-mode-alist))
(add-to-list 'auto-mode-alist '("\\.\\(p\\([lm]\\)\\)\\'" . cperl-mode))
(add-to-list 'auto-mode-alist '("\\.t$" . cperl-mode))
(add-to-list 'auto-mode-alist '("cpanfile$" . cperl-mode))

(setq interpreter-mode-alist (rassq-delete-all 'perl-mode interpreter-mode-alist))
(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))


;;; EOF.
