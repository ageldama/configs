;;; -*- mode: emacs-lisp; coding: utf-8; -*-
(setq inhibit-startup-screen t)
(setq default-input-method   "korean-hangul")
(prefer-coding-system 'utf-8-unix)

(setq user-full-name    "Jong-Hyouk Yun")
(setq user-mail-address "ageldama@gmail.com")

(column-number-mode  t)
(display-time-mode   -1)
(show-paren-mode     t)
(transient-mark-mode t)

(defvar yes-frills t)

;;; no backup files
(setq make-backup-files nil)
(setq version-control   nil)   ; backup uses version numbers?

(if window-system
    (progn
      (menu-bar-mode   -1)
      (tool-bar-mode   -1)
      (scroll-bar-mode -1))
  (progn
    (menu-bar-mode   -1)))

;;; package.el
(require 'package)
(dolist (i '(("org"		.	"http://orgmode.org/elpa/")
	     ("gnu"		.	"http://elpa.gnu.org/packages/")
	     ("melpa"		.	"http://melpa.org/packages/")
	     ("marmalade"	.	"http://marmalade-repo.org/packages/")))
  (add-to-list 'package-archives i))

(setq package-check-signature nil)

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;;; GUI fonts
(defun set-gui-font-for-korean (korean-font fallback-font)
  "Set the korean range (by 'KOREAN-FONT')
and latin (as FALLBACK-FONT) separately."
  (set-face-attribute 'default nil :font fallback-font)
  ;; Korean ranges
  (set-fontset-font "fontset-default" '(#x1100 . #xffdc)
		    (cons korean-font "unicode-bmp"))
  (set-fontset-font "fontset-default" '(#xe0bc . #xf66e)
		    (cons korean-font "unicode-bmp")))

(when (and t window-system)
  ;; 한글 예시. Ll1| 0Oo@ [] {} 아침 일찍 구름 낀 백제성을 떠나.
  ;; NOTE: 화면이 C-p, C-n 등이 느리면 /D2Coding/, 괜찮으면 /Noto Sans Mono CJK/
  (cond ((or (string-equal system-type "gnu/linux")
             (string-equal system-type "darwin"))
	 (set-gui-font-for-korean "Noto Sans Mono CJK KR" 
                                  "Noto Sans Mono CJK KR" )
         ;;(set-face-attribute 'default nil :font "Noto Sans Mono CJK KR")
	 )
	;; Windows
        ((string-equal system-type "windows-nt")
         (set-face-attribute 'default nil :font "Consolas-11"))
        (t :unknown)))

;;; cleaner modeline.
(use-package diminish :ensure t :pin melpa
  :config (diminish 'undo-tree-mode))

;;; which-key
(use-package which-key :ensure t
  :diminish which-key-mode
  :config (which-key-mode))

(use-package helm-descbinds     :ensure t :pin melpa
  :config (global-set-key (kbd "C-h b") 'helm-descbinds))

;;; Evil
(use-package evil :ensure t :pin melpa
  :init (setq evil-want-integration nil)
  :config (evil-mode -1))

(defun toggle-evil-mode ()
  (interactive)
  (evil-mode (if (null evil-state) 1 -1)))

(global-set-key (kbd "C-z") 'toggle-evil-mode)

(when yes-frills
  (global-linum-mode   +1)
  (global-hl-line-mode +1))

;; (use-package hlinum :ensure t :pin melpa :config (hlinum-deactivate))

;; (use-package vi-tilde-fringe :ensure t :pin melpa
;;   :config (global-vi-tilde-fringe-mode -1))

;; (defun my-evil-visual-state-entry-hook ()
;;   (when (and hl-line-mode (eq evil-visual-selection 'block))
;;     (hl-line-mode -1)))
;; (add-hook 'evil-visual-state-entry-hook 'my-evil-visual-state-entry-hook)
;; (defun my-evil-visual-state-exit-hook ()
;;   (when (and (not hl-line-mode) (eq evil-visual-selection 'block))
;;     (hl-line-mode)))
;; (add-hook 'evil-visual-state-exit-hook 'my-evil-visual-state-exit-hook)

(use-package evil-collection :ensure t :after evil
  :config (evil-collection-init))

;; (use-package evil-easymotion :ensure t :pin melpa
;;   :config (evilem-default-keybindings "SPC"))

(use-package evil-goggles :ensure t :pin melpa
  :diminish 'evil-goggles-mode
  :config (when yes-frills (evil-goggles-mode -1)))

(use-package evil-vimish-fold :ensure t :pin melpa
  :diminish 'evil-vimish-fold-mode
  :config (evil-vimish-fold-mode 1))

;; (use-package evil-matchit :ensure t :pin melpa
;;   :config (global-evil-matchit-mode +1))

;; (use-package evil-lion :ensure t :pin melpa
;;   :config (evil-lion-mode +1))

;;; rainbow-delimiters
(use-package rainbow-delimiters  :ensure t :pin melpa
  :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

;;; miscs
(use-package neotree :ensure t :pin melpa)

(use-package markdown-mode :ensure t :pin melpa)

(use-package unfill :ensure t :pin melpa)

(use-package hl-todo :ensure t :pin melpa
  :config (global-hl-todo-mode +1))

;; (use-package ace-popup-menu :ensure t :pin melpa
;;   :config (ace-popup-menu-mode -1))

;;; Themes
(when (and t window-system)
  (use-package doom-themes :ensure t :pin melpa)
  (load-theme 'doom-nord t))

;;; Modeline
;; (when (and window-system)
;;   (use-package telephone-line :ensure t :pin melpa
;;     :config (telephone-line-mode -1)))

;;; lacarte -- better F10 menu-bar.
(use-package lacarte :ensure t :pin marmalade
  :config (progn
   (global-set-key [?\e ?\M-x] 'lacarte-execute-command)
   (global-set-key [?\M-`]     'lacarte-execute-menu-command)
   (global-set-key [f10]       'lacarte-execute-menu-command)))

;;; helm
(use-package helm :ensure t :pin melpa
  :diminish 'helm-mode
  :config (progn (require 'helm-config)
		 (helm-mode +1)
		 (setq helm-split-window-in-side-p           t
		       helm-move-to-line-cycle-in-source     nil ; 맨 위/마지막에서 더 올라가면 특별한 항목들 선택이 불가해져서 꺼야함.
		       helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
		       helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
		       helm-ff-file-name-history-use-recentf t
		       helm-echo-input-in-header-line t
		       helm-mode-fuzzy-match t
		       helm-recentf-fuzzy-match t
		       helm-buffers-fuzzy-matching t
		       helm-recentf-fuzzy-match t
		       helm-buffers-fuzzy-matching t
		       helm-locate-fuzzy-match t
		       helm-M-x-fuzzy-match t
		       helm-semantic-fuzzy-match t
		       helm-imenu-fuzzy-match t
		       helm-apropos-fuzzy-match t
		       helm-lisp-completion-at-point nil)
		 (global-set-key (kbd "M-x") 'helm-M-x)
		 (global-set-key (kbd "C-x C-f") 'helm-find-files)
		 (global-set-key (kbd "C-x b") 'helm-mini)
		 ))

;;; helm-ag
(use-package helm-ag :ensure t :pin melpa
  :config (setq helm-ag-insert-at-point 'symbol))

(defun helm-ag-maybe-projectile ()
  (interactive)
  (if (projectile-project-p)
      (helm-projectile-ag)
    (helm-ag)))
 

;;; projectile + helm
(use-package projectile :pin melpa
  :config (projectile-global-mode))

(use-package helm-projectile :ensure t :pin melpa
  :config (progn (setq projectile-completion-system 'helm)
                 (helm-projectile-on)))

;;; dashboard
(use-package dashboard :ensure t :pin melpa
  :after projectile
  :config (progn (dashboard-setup-startup-hook)
		 (setq dashboard-items '((recents   . 5)
					 (projects  . 5)
					 (bookmarks . 5)
					 (agenda    . 5)
					 (registers . 5)))))

;;; Swoop
(use-package helm-swoop :ensure t :pin melpa
  :config (progn
	    ;; If there is no symbol at the cursor, use the last used words instead.
	    (setq helm-swoop-pre-input-function
		  (lambda ()
		    (let (($pre-input (thing-at-point 'symbol)))
		      (if (eq (length $pre-input) 0)
			  (if (boundp 'helm-swoop-pattern) ;; this variable keeps the last used words
                              helm-swoop-pattern "")
                        $pre-input))))
	    ;; When doing isearch, hand the word over to helm-swoop
	    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
	    ;; From helm-swoop to helm-multi-swoop-all
	    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)))


;;; Git
(use-package magit :ensure t :pin melpa)

(use-package git-gutter-fringe :ensure t :pin melpa
  :diminish 'git-gutter-mode
  :config (when yes-frills (global-git-gutter-mode +1)))


;;; flycheck.
(use-package flycheck :ensure t :pin melpa
  :config (global-flycheck-mode +1))

;; (add-hook 'flycheck-error-list-mode-hook
;;             (lambda ()
;;               (setq tabulated-list-format '[("Line" 5 flycheck-error-list-entry-< :right-align t)
;;                                             ("Col" 3 nil :right-align t)
;;                                             ("Level" 8 flycheck-error-list-entry-level-<)
;;                                             ("ID" 20 t)
;;                                             (#("Message (Checker)" 0 9
;;                                                (face default)
;;                                                9 16
;;                                                (face flycheck-error-list-checker-name)
;;                                                16 17
;;                                                (face default))
;;                                              0 t)])))

;;; company.
(use-package company :ensure t :pin melpa
  :config (progn (require 'company)
		 (global-company-mode t)
		 (global-set-key (kbd "C-c \\") 'company-complete)
		 (define-key company-active-map (kbd "RET") 'company-complete-selection)
		 (define-key company-active-map (kbd "<prior>") 'company-previous-page)
		 (define-key company-active-map (kbd "<next>") 'company-next-page)
		 (setq company-tooltip-align-annotations t)
		 (add-hook 'after-init-hook 'global-company-mode)))


;;; eldoc
(use-package eldoc :ensure t :pin melpa :diminish eldoc-mode)

;;; Org
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(setq org-log-done 'time)

;; writeroom?
(use-package writeroom-mode :ensure t :pin melpa)


;;; Multiterm
(use-package multi-term :ensure t :pin melpa
  :config (add-hook 'term-mode-hook
                    (lambda() (turn-off-evil-mode)
                      (linum-mode -1)
                      (hl-line-mode -1))))

;;; Window move.
;; (defun helm-select-window ()
;;   (interactive)
;;   (when (< 1 (length (window-list)))
;;     (let* ((names-wins
;; 	    (mapcar (lambda (w) (cons (prin1-to-string w) w)) (window-list)))
;; 	   (src `((name . "Window")
;; 		  (candidates . ,names-wins)
;; 		  (action . (lambda (sel) (select-window sel))))))
;;       (helm :sources src))))
;; (global-set-key (kbd "C-x w") 'helm-select-window)

(use-package ace-window :ensure t :pin melpa
  :config (global-set-key (kbd "C-x o") 'ace-window))

;;; Yasnippet
(use-package yasnippet :ensure t :pin melpa
  :config ;;(yas-global-mode +1)
  (add-hook 'prog-mode-hook #'yas-minor-mode))

(use-package yasnippet-snippets :ensure t :pin melpa
  :after yasnippet)

;;; avy
;; (use-package avy :ensure t :pin melpa
;;   :config (avy-setup-default)
;;   (global-set-key (kbd "C-c C-j") 'avy-resume))

(use-package highlight-symbol :ensure t :pin melpa)

(use-package multiple-cursors :ensure t :pin melpa
  :config (progn (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
                 (global-set-key (kbd "C->") 'mc/mark-next-like-this)
                 (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
                 (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)))


;;; My Monsterous Keybindings.
(cl-flet ((with-prefix (s) (concat "C-` " s)))
  (macrolet ((bind (s cmd)
             `(global-set-key (kbd (with-prefix ,s)) ,cmd)))
    ;;
    (bind "/" 'helm-swoop)
    (bind "#" 'helm-occur)
    (bind "a" 'helm-ag-maybe-projectile)

    (bind "T" 'multi-term)

    (bind "TAB" 'helm-mini)

    (bind "p" 'helm-projectile)

    (bind "G" 'magit-status)
    (bind "g" 'magit-file-popup)

    (bind "k" 'helm-show-kill-ring)
    (bind "r" 'helm-register)
    (bind "m" 'helm-mark-ring)
    (bind "M" 'helm-all-mark-rings)

    (bind "b /" 'helm-multi-swoop)
    (bind "b a" 'helm-ag-buffers)

    (bind "` r" 'helm-regexp)
    (bind "` t" 'helm-top)
    (bind "` p" 'helm-list-emacs-process)
    (bind "` b" 'helm-bookmarks)

))


;;; General -- Leading Keybinder
(use-package general :ensure t :pin melpa)

(define-key evil-normal-state-map "," (general-simulate-key "C-c m"))

(define-key evil-normal-state-map (kbd "C-w <left>") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-w <right>") 'evil-window-right)
(define-key evil-normal-state-map (kbd "C-w <up>") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-w <down>") 'evil-window-down)

(general-create-definer my-root-leader-def :prefix "SPC")
(my-root-leader-def 'normal
  "<left>" 'evil-window-left
  "<right>" 'evil-window-right
  "<up>" 'evil-window-up
  "<down>" 'evil-window-down
  "/" 'helm-swoop
  "a" 'helm-ag-maybe-projectile
  "#" 'helm-occur
  "SPC" 'helm-M-x
  "TAB" 'helm-mini
  "?" 'helm-descbinds
  "'" 'multi-term
  "g" 'magit-file-popup
  "G" 'magit-status
  "p" 'helm-projectile
  "P" (general-simulate-key "C-c p" :name projectile)
  "e" (general-simulate-key "C-c !" :name flycheck)
  "w" 'writeroom-mode
  "i" 'yas-insert-snippet
  "k" 'helm-show-kill-ring
  ;; "f" - files.
  "f" '(:ignore t :which-key "file+dir")
  "f d" 'dired
  "f f" 'helm-find
  "f r" 'helm-recentf
  "f S" 'evil-write-all
  ;; "b" - buffers.
  "b" '(:ignore t :which-key "buffers")
  "b /" 'helm-multi-swoop
  "b a" 'helm-ag-buffers
  ;; "y" - yasnippet
  "y" '(:ignore t :which-key "yasnippet")
  "y i" 'yas-insert-snippet
  "y e" 'yas-visit-snippet-file
  "y n" 'yas-new-snippet
  ;; avy
  ;; "v" '(:ignore t :which-key "avy")
  ;; "v c" 'avy-goto-char
  ;; "v w" 'avy-goto-word-0
  ;; "v <" 'avy-pop-mark
  ;; "`" - misc
  "`" '(:ignore t :which-key "misc")
  "` r" 'helm-regexp
  "` t" 'helm-top
  "` p" 'helm-list-emacs-process
  "` b" 'helm-bookmarks
  "` r" 'helm-register
  "` m" 'helm-mark-ring
  "` M" 'helm-all-mark-rings
  )

;;; Evil, no thanks here:
(defun evil-nothanks-mode (mode)
  "Apply evil-set-initial-state-mode as 'EMACS for given MODE is available."
  (when (fboundp mode)
    (evil-set-initial-state mode 'emacs)))

(when (fboundp 'evil-set-initial-state)
  (dolist (mode '(dired-mode
		  helm-ag-mode
		  helm-moccur-mode
		  Info-mode
		  eww-mode
		  debugger-mode
                  compilation-mode
		  term-mode))
    (evil-nothanks-mode mode)))


;;; Layers support.
(defvar load-layer-base-path (expand-file-name "~/Projects/configs/emacs/"))

(defun load-layer (layer-name)
  "Specify LAYER-NAME as elisp filename to load."
  (interactive "fFile to load:")
  (let ((fn (if (file-exists-p layer-name)
		layer-name
	      (format "%s%s" load-layer-base-path layer-name))))
    (load-file fn)))

(defun load-cmake-ide-layer ()
  (interactive)
  (load-layer "cmake-ide/cmake-ide.el"))

(defun load-python-ide-layer ()
  (interactive)
  (load-layer "python/python.el"))

;; (defun load-tide-ide-layer ()
;;   (interactive)
;;   (load-layer "javascript/tide.el"))

(defun load-layer-by-file-ext (file-name-p-fn loaded-flag-sym load-fn)
  (unless (boundp loaded-flag-sym)
    (let* ((file-name (buffer-file-name))
	   (file-ext-match (funcall file-name-p-fn file-name)))
      (funcall load-fn))))

(defun my-find-file-load-layer-hook ()
  ;; (load-layer-by-file-ext (lambda (file-name) (s-ends-with? ".py" file-name))
  ;;       		  'agelmacs/layer/python
  ;;       		  'load-python-ide-layer)

  ;; (load-layer-by-file-ext (lambda (file-name)
  ;;       		    (some (lambda (suffix) (s-ends-with? suffix file-name))
  ;;       			  '(".js" ".json" )))
  ;;       		  'agelmacs/layer/tide
  ;;       		  'load-tide-ide-layer)

  (load-layer-by-file-ext (lambda (file-name)
			    (some (lambda (suffix) (s-ends-with? suffix file-name))
				  '(".c" ".h" ".cxx" ".cc" ".cpp" ".C" ".hxx" ".hpp" ".H")))
			  'agelmacs/layer/cmake-ide
			  'load-cmake-ide-layer)

  )

;; (add-hook 'find-file-hook 'my-find-file-load-layer-hook)



(load-layer "proto+grpc.el")
(load-layer "groovy/groovy.el")
(load-layer "javascript/js2.el")
;; (load-layer "slime.lisp")
;; (load-layer "sly.el")

(setq-default indent-tabs-mode nil)
(setq tab-width nil) ;; ONLY affects to REAL <TAB>-chars to display.
;; (global-set-key "\t" (lambda () (interactive) (insert-char 32 2))) ;; [tab] inserts two spaces
(electric-indent-mode +1)


;;; EOF.
